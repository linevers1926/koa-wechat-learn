{"version":3,"sources":["rng-browser.js"],"names":[],"mappings":";;;;AAIA,IAAI,GAAJ;;AAEA,IAAI,SAAS,OAAO,MAAP,IAAiB,OAAO,QAArC,C;AACA,IAAI,UAAU,OAAO,eAArB,EAAsC;;AAEpC,MAAI,QAAQ,IAAI,UAAJ,CAAe,EAAf,CAAZ;AACA,QAAM,SAAS,SAAT,GAAqB;AACzB,WAAO,eAAP,CAAuB,KAAvB;AACA,WAAO,KAAP;AACD,GAHD;AAID;;AAED,IAAI,CAAC,GAAL,EAAU;;;;;AAKR,MAAK,OAAO,IAAI,KAAJ,CAAU,EAAV,CAAZ;AACA,QAAM,YAAW;AACf,SAAK,IAAI,IAAI,CAAR,EAAW,CAAhB,EAAmB,IAAI,EAAvB,EAA2B,GAA3B,EAAgC;AAC9B,UAAI,CAAC,IAAI,IAAL,MAAe,CAAnB,EAAsB,IAAI,KAAK,MAAL,KAAgB,WAApB;AACtB,WAAK,CAAL,IAAU,OAAO,CAAC,IAAI,IAAL,KAAc,CAArB,IAA0B,IAApC;AACD;;AAED,WAAO,IAAP;AACD,GAPD;AAQD;;AAED,OAAO,OAAP,GAAiB,GAAjB","file":"rng-browser-compiled.js","sourcesContent":["// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n"]}