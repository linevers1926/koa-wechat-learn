{"version":3,"sources":["v1.js"],"names":[],"mappings":";;;AAGA,IAAI,MAAM,QAAQ,WAAR,CAAV;AACA,IAAI,cAAc,QAAQ,mBAAR,CAAlB;;;;;;;;AAQA,IAAI,aAAa,KAAjB;;;AAGA,IAAI,UAAU,CACZ,WAAW,CAAX,IAAgB,IADJ,EAEZ,WAAW,CAAX,CAFY,EAEG,WAAW,CAAX,CAFH,EAEkB,WAAW,CAAX,CAFlB,EAEiC,WAAW,CAAX,CAFjC,EAEgD,WAAW,CAAX,CAFhD,CAAd;;;AAMA,IAAI,YAAY,CAAC,WAAW,CAAX,KAAiB,CAAjB,GAAqB,WAAW,CAAX,CAAtB,IAAuC,MAAvD;;;AAGA,IAAI,aAAa,CAAjB;IAAoB,aAAa,CAAjC;;;AAGA,SAAS,EAAT,CAAY,OAAZ,EAAqB,GAArB,EAA0B,MAA1B,EAAkC;AAChC,MAAI,IAAI,OAAO,MAAP,IAAiB,CAAzB;AACA,MAAI,IAAI,OAAO,EAAf;;AAEA,YAAU,WAAW,EAArB;;AAEA,MAAI,WAAW,QAAQ,QAAR,KAAqB,SAArB,GAAiC,QAAQ,QAAzC,GAAoD,SAAnE;;;;;;AAMA,MAAI,QAAQ,QAAQ,KAAR,KAAkB,SAAlB,GAA8B,QAAQ,KAAtC,GAA8C,IAAI,IAAJ,GAAW,OAAX,EAA1D;;;;AAIA,MAAI,QAAQ,QAAQ,KAAR,KAAkB,SAAlB,GAA8B,QAAQ,KAAtC,GAA8C,aAAa,CAAvE;;;AAGA,MAAI,KAAM,QAAQ,UAAT,GAAuB,CAAC,QAAQ,UAAT,IAAqB,KAArD;;;AAGA,MAAI,KAAK,CAAL,IAAU,QAAQ,QAAR,KAAqB,SAAnC,EAA8C;AAC5C,eAAW,WAAW,CAAX,GAAe,MAA1B;AACD;;;;AAID,MAAI,CAAC,KAAK,CAAL,IAAU,QAAQ,UAAnB,KAAkC,QAAQ,KAAR,KAAkB,SAAxD,EAAmE;AACjE,YAAQ,CAAR;AACD;;;AAGD,MAAI,SAAS,KAAb,EAAoB;AAClB,UAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAED,eAAa,KAAb;AACA,eAAa,KAAb;AACA,cAAY,QAAZ;;;AAGA,WAAS,cAAT;;;AAGA,MAAI,KAAK,CAAC,CAAC,QAAQ,SAAT,IAAsB,KAAtB,GAA8B,KAA/B,IAAwC,WAAjD;AACA,IAAE,GAAF,IAAS,OAAO,EAAP,GAAY,IAArB;AACA,IAAE,GAAF,IAAS,OAAO,EAAP,GAAY,IAArB;AACA,IAAE,GAAF,IAAS,OAAO,CAAP,GAAW,IAApB;AACA,IAAE,GAAF,IAAS,KAAK,IAAd;;;AAGA,MAAI,MAAO,QAAQ,WAAR,GAAsB,KAAvB,GAAgC,SAA1C;AACA,IAAE,GAAF,IAAS,QAAQ,CAAR,GAAY,IAArB;AACA,IAAE,GAAF,IAAS,MAAM,IAAf;;;AAGA,IAAE,GAAF,IAAS,QAAQ,EAAR,GAAa,GAAb,GAAmB,IAA5B,C;AACA,IAAE,GAAF,IAAS,QAAQ,EAAR,GAAa,IAAtB;;;AAGA,IAAE,GAAF,IAAS,aAAa,CAAb,GAAiB,IAA1B;;;AAGA,IAAE,GAAF,IAAS,WAAW,IAApB;;;AAGA,MAAI,OAAO,QAAQ,IAAR,IAAgB,OAA3B;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,MAAE,IAAI,CAAN,IAAW,KAAK,CAAL,CAAX;AACD;;AAED,SAAO,MAAM,GAAN,GAAY,YAAY,CAAZ,CAAnB;AACD;;AAED,OAAO,OAAP,GAAiB,EAAjB","file":"v1-compiled.js","sourcesContent":["// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n"]}