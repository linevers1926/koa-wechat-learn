{"version":3,"sources":["bench.js"],"names":[],"mappings":";;AAEA,IAAI,WAAW,QAAQ,IAAR,CAAf;IACI,QAAW,QAAQ,OAAR,CADf;IAEI,SAAW,QAAQ,QAAR,CAFf;IAGI,WAAW,CAHf;;AAMA,IAAI,YAAY,QAAQ,WAAR,CAAhB;AACA,IAAI,QAAQ,IAAI,UAAU,KAAd,EAAZ;;AAEA,IAAI,SAAS,EAAb;AACA,KAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,GAApB,EAAyB,GAAzB,EACA;AACE,SAAO,IAAP,CAAY,CAAZ;AACA,cAAY,CAAZ;AACD;;AAED;;;AAAA,CAGC,GAHD,CAGK,WAHL,EAGkB,UAAS,QAAT,EAClB;AACE,MAAI,QAAQ,CAAZ;;AAEA,QAAM,GAAN,CAAU,MAAV,EACA,UAAS,CAAT,EAAY,EAAZ,EACA;AACE,iBAAa,YACb;AACE,eAAS,CAAT;AACA,SAAG,IAAH,EAAS,KAAT;AACD,KAJD;AAKD,GARD,EASA,UAAS,GAAT,EAAc,MAAd,EACA;AACE,WAAO,OAAP,CAAe,GAAf;AACA,WAAO,KAAP,CAAa,OAAO,OAAO,MAAP,GAAgB,CAAvB,CAAb,EAAwC,QAAxC;AACA,aAAS,OAAT;AACD,GAdD;AAeD,CAtBD,EAsBG,EAAC,SAAS,IAAV,EAtBH,EAyBC,GAzBD,CAyBK,mBAzBL,EAyB0B,UAAS,QAAT,EAC1B;AACE,MAAI,QAAQ,CAAZ;;AAEA,WAAS,QAAT,CAAkB,MAAlB,EACA,UAAS,CAAT,EAAY,EAAZ,EACA;AACE,iBAAa,YACb;AACE,eAAS,CAAT;AACA,SAAG,IAAH,EAAS,KAAT;AACD,KAJD;AAKD,GARD,EASA,UAAS,GAAT,EAAc,MAAd,EACA;AACE,WAAO,OAAP,CAAe,GAAf;AACA,WAAO,KAAP,CAAa,OAAO,OAAO,MAAP,GAAgB,CAAvB,CAAb,EAAwC,QAAxC;AACA,aAAS,OAAT;AACD,GAdD;AAeD,CA5CD,EA4CG,EAAC,SAAS,IAAV,EA5CH;;;AAAA,CAgDC,EAhDD,CAgDI,OAhDJ,EAgDa,UAAS,EAAT,EACb;AACE,UAAQ,GAAR,CAAY,OAAO,GAAG,MAAV,CAAZ;AACD,CAnDD,EAoDC,EApDD,CAoDI,UApDJ,EAoDgB,YAChB;AACE,UAAQ,GAAR,CAAY,gBAAgB,KAAK,MAAL,CAAY,SAAZ,EAAuB,GAAvB,CAA2B,MAA3B,CAA5B;AACD,CAvDD;;AAAA,CAyDC,GAzDD,CAyDK,EAAE,SAAS,IAAX,EAzDL","file":"bench-compiled.js","sourcesContent":["/* eslint no-console: \"off\" */\n\nvar asynckit = require('./')\n  , async    = require('async')\n  , assert   = require('assert')\n  , expected = 0\n  ;\n\nvar Benchmark = require('benchmark');\nvar suite = new Benchmark.Suite;\n\nvar source = [];\nfor (var z = 1; z < 100; z++)\n{\n  source.push(z);\n  expected += z;\n}\n\nsuite\n// add tests\n\n.add('async.map', function(deferred)\n{\n  var total = 0;\n\n  async.map(source,\n  function(i, cb)\n  {\n    setImmediate(function()\n    {\n      total += i;\n      cb(null, total);\n    });\n  },\n  function(err, result)\n  {\n    assert.ifError(err);\n    assert.equal(result[result.length - 1], expected);\n    deferred.resolve();\n  });\n}, {'defer': true})\n\n\n.add('asynckit.parallel', function(deferred)\n{\n  var total = 0;\n\n  asynckit.parallel(source,\n  function(i, cb)\n  {\n    setImmediate(function()\n    {\n      total += i;\n      cb(null, total);\n    });\n  },\n  function(err, result)\n  {\n    assert.ifError(err);\n    assert.equal(result[result.length - 1], expected);\n    deferred.resolve();\n  });\n}, {'defer': true})\n\n\n// add listeners\n.on('cycle', function(ev)\n{\n  console.log(String(ev.target));\n})\n.on('complete', function()\n{\n  console.log('Fastest is ' + this.filter('fastest').map('name'));\n})\n// run async\n.run({ 'async': true });\n"]}