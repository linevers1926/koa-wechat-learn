{"version":3,"sources":["parallel.js"],"names":[],"mappings":"AAAA,IAAI,UAAa,QAAQ,kBAAR,CAAjB;IACI,YAAa,QAAQ,gBAAR,CADjB;IAEI,aAAa,QAAQ,qBAAR,CAFjB;;;AAMA,OAAO,OAAP,GAAiB,QAAjB;;;;;;;;;;AAUA,SAAS,QAAT,CAAkB,IAAlB,EAAwB,QAAxB,EAAkC,QAAlC,EACA;AACE,MAAI,QAAQ,UAAU,IAAV,CAAZ;;AAEA,SAAO,MAAM,KAAN,GAAc,CAAC,MAAM,WAAN,KAAsB,IAAvB,EAA6B,MAAlD,EACA;AACE,YAAQ,IAAR,EAAc,QAAd,EAAwB,KAAxB,EAA+B,UAAS,KAAT,EAAgB,MAAhB,EAC/B;AACE,UAAI,KAAJ,EACA;AACE,iBAAS,KAAT,EAAgB,MAAhB;AACA;AACD;;;AAGD,UAAI,OAAO,IAAP,CAAY,MAAM,IAAlB,EAAwB,MAAxB,KAAmC,CAAvC,EACA;AACE,iBAAS,IAAT,EAAe,MAAM,OAArB;AACA;AACD;AACF,KAdD;;AAgBA,UAAM,KAAN;AACD;;AAED,SAAO,WAAW,IAAX,CAAgB,KAAhB,EAAuB,QAAvB,CAAP;AACD","file":"parallel-compiled.js","sourcesContent":["var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n"]}