{"version":3,"sources":["readable_asynckit.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,gBAAR,CAAhB;IACI,QAAY,QAAQ,YAAR,CADhB;;;AAKA,OAAO,OAAP,GAAiB,gBAAjB;;;;;;AAMA,SAAS,gBAAT,GACA;AACE,mBAAiB,MAAjB,CAAwB,KAAxB,CAA8B,IAA9B,EAAoC,SAApC;;;AAGA,OAAK,IAAL,GAAY,EAAZ;;;AAGA,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,MAAL,GAAe,MAAf;AACA,OAAK,KAAL,GAAe,KAAf;AACD;;;;;;;;AAQD,SAAS,OAAT,GACA;AACE,MAAI,KAAK,SAAT,EACA;AACE;AACD;;AAED,OAAK,SAAL,GAAiB,IAAjB;;AAEA,MAAI,OAAO,KAAK,UAAZ,IAA0B,UAA9B,EACA;AACE,SAAK,UAAL;AACD;AACF;;;;;;;AAOD,SAAS,MAAT,GACA;;AAEE,MAAI,SAAS,UAAU,CAAV;;AAAb;MAEI,OAAS,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC;;AAFb;MAII,QAAS,KAAK,CAAL;;AAJb;MAMI,QAAS,UAAU,QAAV,CAAmB,IAAnB,CAAwB,IAAxB,EAA8B,KAAK,KAAK,MAAL,GAAc,CAAnB,CAA9B,CANb;;AASA,OAAK,KAAK,MAAL,GAAc,CAAnB,IAAwB,KAAxB;;AAEA,OAAK,CAAL,IAAU,UAAU,QAAV,CAAmB,IAAnB,CAAwB,IAAxB,EAA8B,KAAK,CAAL,CAA9B,CAAV;;;AAGA,QAAM,YACN;AACE,QAAI,CAAC,KAAK,SAAV,EACA;AACE,WAAK,UAAL,GAAkB,OAAO,KAAP,CAAa,IAAb,EAAmB,IAAnB,CAAlB;AACD,KAHD,MAKA;AACE,YAAM,IAAN,EAAY,MAAM,OAAN,CAAc,KAAd,IAAuB,EAAvB,GAA4B,EAAxC;AACD;AACF,GAVK,CAUJ,IAVI,CAUC,IAVD,CAAN;AAWD;;;;;;;;AASD,SAAS,KAAT,GACA,CAEC","file":"readable_asynckit-compiled.js","sourcesContent":["var streamify = require('./streamify.js')\n  , defer     = require('./defer.js')\n  ;\n\n// API\nmodule.exports = ReadableAsyncKit;\n\n/**\n * Base constructor for all streams\n * used to hold properties/methods\n */\nfunction ReadableAsyncKit()\n{\n  ReadableAsyncKit.super_.apply(this, arguments);\n\n  // list of active jobs\n  this.jobs = {};\n\n  // add stream methods\n  this.destroy = destroy;\n  this._start  = _start;\n  this._read   = _read;\n}\n\n/**\n * Destroys readable stream,\n * by aborting outstanding jobs\n *\n * @returns {void}\n */\nfunction destroy()\n{\n  if (this.destroyed)\n  {\n    return;\n  }\n\n  this.destroyed = true;\n\n  if (typeof this.terminator == 'function')\n  {\n    this.terminator();\n  }\n}\n\n/**\n * Starts provided jobs in async manner\n *\n * @private\n */\nfunction _start()\n{\n  // first argument â€“ runner function\n  var runner = arguments[0]\n    // take away first argument\n    , args   = Array.prototype.slice.call(arguments, 1)\n      // second argument - input data\n    , input  = args[0]\n      // last argument - result callback\n    , endCb  = streamify.callback.call(this, args[args.length - 1])\n    ;\n\n  args[args.length - 1] = endCb;\n  // third argument - iterator\n  args[1] = streamify.iterator.call(this, args[1]);\n\n  // allow time for proper setup\n  defer(function()\n  {\n    if (!this.destroyed)\n    {\n      this.terminator = runner.apply(null, args);\n    }\n    else\n    {\n      endCb(null, Array.isArray(input) ? [] : {});\n    }\n  }.bind(this));\n}\n\n\n/**\n * Implement _read to comply with Readable streams\n * Doesn't really make sense for flowing object mode\n *\n * @private\n */\nfunction _read()\n{\n\n}\n"]}