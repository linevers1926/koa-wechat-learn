{"version":3,"sources":["readable_serial_ordered.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,qBAAR,CAApB;;;AAGA,OAAO,OAAP,GAAiB,qBAAjB;;AAEA,OAAO,OAAP,CAAe,SAAf,GAA4B,cAAc,SAA1C;AACA,OAAO,OAAP,CAAe,UAAf,GAA4B,cAAc,UAA1C;;;;;;;;;;;AAWA,SAAS,qBAAT,CAA+B,IAA/B,EAAqC,QAArC,EAA+C,UAA/C,EAA2D,QAA3D,EACA;AACE,MAAI,EAAE,gBAAgB,qBAAlB,CAAJ,EACA;AACE,WAAO,IAAI,qBAAJ,CAA0B,IAA1B,EAAgC,QAAhC,EAA0C,UAA1C,EAAsD,QAAtD,CAAP;AACD;;;AAGD,wBAAsB,MAAtB,CAA6B,IAA7B,CAAkC,IAAlC,EAAwC,EAAC,YAAY,IAAb,EAAxC;;AAEA,OAAK,MAAL,CAAY,aAAZ,EAA2B,IAA3B,EAAiC,QAAjC,EAA2C,UAA3C,EAAuD,QAAvD;AACD","file":"readable_serial_ordered-compiled.js","sourcesContent":["var serialOrdered = require('../serialOrdered.js');\n\n// API\nmodule.exports = ReadableSerialOrdered;\n// expose sort helpers\nmodule.exports.ascending  = serialOrdered.ascending;\nmodule.exports.descending = serialOrdered.descending;\n\n/**\n * Streaming wrapper to `asynckit.serialOrdered`\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {stream.Readable#}\n */\nfunction ReadableSerialOrdered(list, iterator, sortMethod, callback)\n{\n  if (!(this instanceof ReadableSerialOrdered))\n  {\n    return new ReadableSerialOrdered(list, iterator, sortMethod, callback);\n  }\n\n  // turn on object mode\n  ReadableSerialOrdered.super_.call(this, {objectMode: true});\n\n  this._start(serialOrdered, list, iterator, sortMethod, callback);\n}\n"]}