{"version":3,"sources":["iterate.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,YAAR,CAAZ;IACI,QAAQ,QAAQ,YAAR,CADZ;;;AAKA,OAAO,OAAP,GAAiB,OAAjB;;;;;;;;;;AAUA,SAAS,OAAT,CAAiB,IAAjB,EAAuB,QAAvB,EAAiC,KAAjC,EAAwC,QAAxC,EACA;;AAEE,MAAI,MAAM,MAAM,WAAN,IAAqB,MAAM,WAAN,EAAmB,MAAM,KAAzB,CAArB,GAAuD,MAAM,KAAvE;;AAEA,QAAM,IAAN,CAAW,GAAX,IAAkB,OAAO,QAAP,EAAiB,GAAjB,EAAsB,KAAK,GAAL,CAAtB,EAAiC,UAAS,KAAT,EAAgB,MAAhB,EACnD;;;AAGE,QAAI,EAAE,OAAO,MAAM,IAAf,CAAJ,EACA;AACE;AACD;;;AAGD,WAAO,MAAM,IAAN,CAAW,GAAX,CAAP;;AAEA,QAAI,KAAJ,EACA;;;;AAIE,YAAM,KAAN;AACD,KAND,MAQA;AACE,YAAM,OAAN,CAAc,GAAd,IAAqB,MAArB;AACD;;;AAGD,aAAS,KAAT,EAAgB,MAAM,OAAtB;AACD,GA1BiB,CAAlB;AA2BD;;;;;;;;;;;AAWD,SAAS,MAAT,CAAgB,QAAhB,EAA0B,GAA1B,EAA+B,IAA/B,EAAqC,QAArC,EACA;AACE,MAAI,OAAJ;;;AAGA,MAAI,SAAS,MAAT,IAAmB,CAAvB,EACA;AACE,cAAU,SAAS,IAAT,EAAe,MAAM,QAAN,CAAf,CAAV;AACD;;AAHD,OAMA;AACE,gBAAU,SAAS,IAAT,EAAe,GAAf,EAAoB,MAAM,QAAN,CAApB,CAAV;AACD;;AAED,SAAO,OAAP;AACD","file":"iterate-compiled.js","sourcesContent":["var async = require('./async.js')\n  , abort = require('./abort.js')\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n"]}