{"version":3,"sources":["readable_serial.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,cAAR,CAAb;;;AAGA,OAAO,OAAP,GAAiB,cAAjB;;;;;;;;;;AAUA,SAAS,cAAT,CAAwB,IAAxB,EAA8B,QAA9B,EAAwC,QAAxC,EACA;AACE,MAAI,EAAE,gBAAgB,cAAlB,CAAJ,EACA;AACE,WAAO,IAAI,cAAJ,CAAmB,IAAnB,EAAyB,QAAzB,EAAmC,QAAnC,CAAP;AACD;;;AAGD,iBAAe,MAAf,CAAsB,IAAtB,CAA2B,IAA3B,EAAiC,EAAC,YAAY,IAAb,EAAjC;;AAEA,OAAK,MAAL,CAAY,MAAZ,EAAoB,IAApB,EAA0B,QAA1B,EAAoC,QAApC;AACD","file":"readable_serial-compiled.js","sourcesContent":["var serial = require('../serial.js');\n\n// API\nmodule.exports = ReadableSerial;\n\n/**\n * Streaming wrapper to `asynckit.serial`\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {stream.Readable#}\n */\nfunction ReadableSerial(list, iterator, callback)\n{\n  if (!(this instanceof ReadableSerial))\n  {\n    return new ReadableSerial(list, iterator, callback);\n  }\n\n  // turn on object mode\n  ReadableSerial.super_.call(this, {objectMode: true});\n\n  this._start(serial, list, iterator, callback);\n}\n"]}