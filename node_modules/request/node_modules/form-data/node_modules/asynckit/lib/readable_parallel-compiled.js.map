{"version":3,"sources":["readable_parallel.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,gBAAR,CAAf;;;AAGA,OAAO,OAAP,GAAiB,gBAAjB;;;;;;;;;;AAUA,SAAS,gBAAT,CAA0B,IAA1B,EAAgC,QAAhC,EAA0C,QAA1C,EACA;AACE,MAAI,EAAE,gBAAgB,gBAAlB,CAAJ,EACA;AACE,WAAO,IAAI,gBAAJ,CAAqB,IAArB,EAA2B,QAA3B,EAAqC,QAArC,CAAP;AACD;;;AAGD,mBAAiB,MAAjB,CAAwB,IAAxB,CAA6B,IAA7B,EAAmC,EAAC,YAAY,IAAb,EAAnC;;AAEA,OAAK,MAAL,CAAY,QAAZ,EAAsB,IAAtB,EAA4B,QAA5B,EAAsC,QAAtC;AACD","file":"readable_parallel-compiled.js","sourcesContent":["var parallel = require('../parallel.js');\n\n// API\nmodule.exports = ReadableParallel;\n\n/**\n * Streaming wrapper to `asynckit.parallel`\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {stream.Readable#}\n */\nfunction ReadableParallel(list, iterator, callback)\n{\n  if (!(this instanceof ReadableParallel))\n  {\n    return new ReadableParallel(list, iterator, callback);\n  }\n\n  // turn on object mode\n  ReadableParallel.super_.call(this, {objectMode: true});\n\n  this._start(parallel, list, iterator, callback);\n}\n"]}