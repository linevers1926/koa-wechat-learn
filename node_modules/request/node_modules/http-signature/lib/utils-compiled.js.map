{"version":3,"sources":["utils.js"],"names":[],"mappings":";;AAEA,IAAI,SAAS,QAAQ,aAAR,CAAb;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,IAAI,aAAa;AACf,UAAQ,IADO;AAEf,YAAU,IAFK;AAGf,YAAU;AAHK,CAAjB;;AAMA,IAAI,WAAW;AACb,SAAO,IADM;AAEb,SAAO,IAFM;AAGb,WAAS;AAHI,CAAf;;AAMA,SAAS,kBAAT,CAA4B,OAA5B,EAAqC,MAArC,EAA6C;AAC3C,MAAI,MAAM,iBAAV,EACE,MAAM,iBAAN,CAAwB,IAAxB,EAA8B,UAAU,kBAAxC;;AAEF,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,IAAL,GAAY,OAAO,IAAnB;AACD;AACD,KAAK,QAAL,CAAc,kBAAd,EAAkC,KAAlC;;AAEA,SAAS,qBAAT,CAA+B,OAA/B,EAAwC;AACtC,qBAAmB,IAAnB,CAAwB,IAAxB,EAA8B,OAA9B,EAAuC,qBAAvC;AACD;AACD,KAAK,QAAL,CAAc,qBAAd,EAAqC,kBAArC;;AAEA,SAAS,iBAAT,CAA2B,SAA3B,EAAsC;AACpC,MAAI,MAAM,UAAU,WAAV,GAAwB,KAAxB,CAA8B,GAA9B,CAAV;;AAEA,MAAI,IAAI,MAAJ,KAAe,CAAnB,EAAsB;AACpB,UAAO,IAAI,qBAAJ,CAA0B,IAAI,CAAJ,EAAO,WAAP,KAAuB,YAAvB,GAC/B,iBADK,CAAP;AAED;;AAED,MAAI,IAAI,CAAJ,MAAW,MAAX,IAAqB,CAAC,SAAS,IAAI,CAAJ,CAAT,CAA1B,EAA4C;AAC1C,UAAO,IAAI,qBAAJ,CAA0B,IAAI,CAAJ,EAAO,WAAP,KAAuB,aAAvB,GAC/B,mBADK,CAAP;AAED;;AAED,MAAI,CAAC,WAAW,IAAI,CAAJ,CAAX,CAAL,EAAyB;AACvB,UAAO,IAAI,qBAAJ,CAA0B,IAAI,CAAJ,EAAO,WAAP,KAAuB,YAAvB,GAC/B,0BADK,CAAP;AAED;;AAED,SAAQ,GAAR;AACD;;;;AAID,OAAO,OAAP,GAAiB;;AAEf,cAAY,UAFG;AAGf,YAAU,QAHK;;AAKf,sBAAoB,kBALL;AAMf,yBAAuB,qBANR;;AAQf,qBAAmB,iBARJ;;;;;;;;;;;;;AAqBf,eAAa,SAAS,WAAT,CAAqB,GAArB,EAA0B;AACrC,WAAO,MAAP,CAAc,GAAd,EAAmB,SAAnB;;AAEA,QAAI,IAAI,MAAM,QAAN,CAAe,GAAf,EAAoB,KAApB,CAAR;AACA,WAAQ,EAAE,QAAF,CAAW,KAAX,CAAR;AACD,GA1Bc;;;;;;;;;;AAqCf,eAAa,SAAS,WAAT,CAAqB,GAArB,EAA0B;AACrC,WAAO,MAAP,CAAc,GAAd,EAAmB,SAAnB;;AAEA,QAAI,IAAI,MAAM,QAAN,CAAe,GAAf,EAAoB,KAApB,CAAR;AACA,WAAQ,EAAE,WAAF,CAAc,KAAd,EAAqB,QAArB,CAA8B,KAA9B,CAAR;AACD,GA1Cc;;;;;;;AAiDf,kBAAgB,SAAS,cAAT,CAAwB,GAAxB,EAA6B,OAA7B,EAAsC;AACpD,WAAO,KAAP,CAAa,QAAb,EAAuB,OAAQ,GAA/B,EAAqC,YAArC;;AAEA,QAAI,IAAI,MAAM,QAAN,CAAe,GAAf,EAAoB,KAApB,CAAR;AACA,MAAE,OAAF,GAAY,OAAZ;AACA,WAAQ,EAAE,QAAF,CAAW,KAAX,CAAR;AACD;AAvDc,CAAjB","file":"utils-compiled.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar sshpk = require('sshpk');\nvar util = require('util');\n\nvar HASH_ALGOS = {\n  'sha1': true,\n  'sha256': true,\n  'sha512': true\n};\n\nvar PK_ALGOS = {\n  'rsa': true,\n  'dsa': true,\n  'ecdsa': true\n};\n\nfunction HttpSignatureError(message, caller) {\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, caller || HttpSignatureError);\n\n  this.message = message;\n  this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\n\nfunction InvalidAlgorithmError(message) {\n  HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\n\nfunction validateAlgorithm(algorithm) {\n  var alg = algorithm.toLowerCase().split('-');\n\n  if (alg.length !== 2) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' +\n      'valid algorithm'));\n  }\n\n  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' +\n      'are not supported'));\n  }\n\n  if (!HASH_ALGOS[alg[1]]) {\n    throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' +\n      'supported hash algorithm'));\n  }\n\n  return (alg);\n}\n\n///--- API\n\nmodule.exports = {\n\n  HASH_ALGOS: HASH_ALGOS,\n  PK_ALGOS: PK_ALGOS,\n\n  HttpSignatureError: HttpSignatureError,\n  InvalidAlgorithmError: InvalidAlgorithmError,\n\n  validateAlgorithm: validateAlgorithm,\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.toString('pem'));\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.fingerprint('md5').toString('hex'));\n  },\n\n  /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof (pem), 'typeof pem');\n\n    var k = sshpk.parseKey(pem, 'pem');\n    k.comment = comment;\n    return (k.toString('ssh'));\n  }\n};\n"]}