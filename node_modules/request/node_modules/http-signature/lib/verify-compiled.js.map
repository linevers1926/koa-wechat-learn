{"version":3,"sources":["verify.js"],"names":[],"mappings":";;AAEA,IAAI,SAAS,QAAQ,aAAR,CAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,QAAQ,QAAQ,SAAR,CAAZ;;AAEA,IAAI,aAAa,MAAM,UAAvB;AACA,IAAI,WAAW,MAAM,QAArB;AACA,IAAI,wBAAwB,MAAM,qBAAlC;AACA,IAAI,qBAAqB,MAAM,kBAA/B;AACA,IAAI,oBAAoB,MAAM,iBAA9B;;;;AAIA,OAAO,OAAP,GAAiB;;;;;;;;;;;AAWf,mBAAiB,SAAS,eAAT,CAAyB,eAAzB,EAA0C,MAA1C,EAAkD;AACjE,WAAO,MAAP,CAAc,eAAd,EAA+B,iBAA/B;AACA,QAAI,OAAQ,MAAR,KAAoB,QAApB,IAAgC,OAAO,QAAP,CAAgB,MAAhB,CAApC,EACE,SAAS,MAAM,QAAN,CAAe,MAAf,CAAT;AACF,WAAO,EAAP,CAAU,MAAM,GAAN,CAAU,KAAV,CAAgB,MAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAV,EAA2C,4BAA3C;;AAEA,QAAI,MAAM,kBAAkB,gBAAgB,SAAlC,CAAV;AACA,QAAI,IAAI,CAAJ,MAAW,MAAX,IAAqB,IAAI,CAAJ,MAAW,OAAO,IAA3C,EACE,OAAQ,KAAR;;AAEF,QAAI,IAAI,OAAO,YAAP,CAAoB,IAAI,CAAJ,CAApB,CAAR;AACA,MAAE,MAAF,CAAS,gBAAgB,aAAzB;AACA,WAAQ,EAAE,MAAF,CAAS,gBAAgB,MAAhB,CAAuB,SAAhC,EAA2C,QAA3C,CAAR;AACD,GAxBc;;;;;;;;;;;;AAoCf,cAAY,SAAS,UAAT,CAAoB,eAApB,EAAqC,MAArC,EAA6C;AACvD,WAAO,MAAP,CAAc,eAAd,EAA+B,YAA/B;AACA,WAAO,MAAP,CAAc,MAAd,EAAsB,QAAtB;;AAEA,QAAI,MAAM,kBAAkB,gBAAgB,SAAlC,CAAV;AACA,QAAI,IAAI,CAAJ,MAAW,MAAf,EACE,OAAQ,KAAR;;AAEF,QAAI,UAAU,IAAI,CAAJ,EAAO,WAAP,EAAd;;AAEA,QAAI,OAAO,OAAO,UAAP,CAAkB,OAAlB,EAA2B,MAA3B,CAAX;AACA,SAAK,MAAL,CAAY,gBAAgB,aAA5B;;;;;;;;;AASA,QAAI,KAAK,OAAO,UAAP,CAAkB,OAAlB,EAA2B,MAA3B,CAAT;AACA,OAAG,MAAH,CAAU,KAAK,MAAL,EAAV;AACA,SAAK,GAAG,MAAH,EAAL;AACA,QAAI,KAAK,OAAO,UAAP,CAAkB,OAAlB,EAA2B,MAA3B,CAAT;AACA,OAAG,MAAH,CAAU,IAAI,MAAJ,CAAW,gBAAgB,MAAhB,CAAuB,SAAlC,EAA6C,QAA7C,CAAV;AACA,SAAK,GAAG,MAAH,EAAL;;;AAGA,QAAI,OAAQ,EAAR,KAAgB,QAApB,EACE,OAAQ,OAAO,EAAf;;AAEF,QAAI,OAAO,QAAP,CAAgB,EAAhB,KAAuB,CAAC,GAAG,MAA/B,EACE,OAAQ,GAAG,QAAH,CAAY,QAAZ,MAA0B,GAAG,QAAH,CAAY,QAAZ,CAAlC;;AAEF,WAAQ,GAAG,MAAH,CAAU,EAAV,CAAR;AACD;AAvEc,CAAjB","file":"verify-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n      pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n      return (false);\n\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return (v.verify(parsedSignature.params.signature, 'base64'));\n  },\n\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac')\n      return (false);\n\n    var hashAlg = alg[1].toUpperCase();\n\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof (h1) === 'string')\n      return (h1 === h2);\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals)\n      return (h1.toString('binary') === h2.toString('binary'));\n\n    return (h1.equals(h2));\n  }\n};\n"]}