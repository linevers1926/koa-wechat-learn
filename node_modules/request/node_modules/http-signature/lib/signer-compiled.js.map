{"version":3,"sources":["signer.js"],"names":[],"mappings":"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","file":"signer-compiled.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      key = sshpk.parsePrivateKey(key);\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = sprintf(AUTHZ_FMT,\n          sig.keyId,\n          sig.algorithm,\n          self.rs_headers.join(' '),\n          sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT,\n      this.rs_keyId,\n      alg,\n      this.rs_headers.join(' '),\n      signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n\n    } else {\n      var key = options.key;\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key);\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    request.setHeader('Authorization', sprintf(AUTHZ_FMT,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n"]}