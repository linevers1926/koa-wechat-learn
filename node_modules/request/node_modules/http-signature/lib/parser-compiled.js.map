{"version":3,"sources":["parser.js"],"names":[],"mappings":"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","file":"parser-compiled.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar util = require('util');\nvar utils = require('./utils');\n\n\n\n///--- Globals\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\nvar State = {\n  New: 0,\n  Params: 1\n};\n\nvar ParamsState = {\n  Name: 0,\n  Quote: 1,\n  Value: 2,\n  Comma: 3\n};\n\n\n///--- Specific Errors\n\n\nfunction ExpiredRequestError(message) {\n  HttpSignatureError.call(this, message, ExpiredRequestError);\n}\nutil.inherits(ExpiredRequestError, HttpSignatureError);\n\n\nfunction InvalidHeaderError(message) {\n  HttpSignatureError.call(this, message, InvalidHeaderError);\n}\nutil.inherits(InvalidHeaderError, HttpSignatureError);\n\n\nfunction InvalidParamsError(message) {\n  HttpSignatureError.call(this, message, InvalidParamsError);\n}\nutil.inherits(InvalidParamsError, HttpSignatureError);\n\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n///--- Exported API\n\nmodule.exports = {\n\n  /**\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\n   *\n   * Note that this API will fully validate the Authorization header, and throw\n   * on any error.  It will not however check the signature, or the keyId format\n   * as those are specific to your environment.  You can use the options object\n   * to pass in extra constraints.\n   *\n   * As a response object you can expect this:\n   *\n   *     {\n   *       \"scheme\": \"Signature\",\n   *       \"params\": {\n   *         \"keyId\": \"foo\",\n   *         \"algorithm\": \"rsa-sha256\",\n   *         \"headers\": [\n   *           \"date\" or \"x-date\",\n   *           \"digest\"\n   *         ],\n   *         \"signature\": \"base64\"\n   *       },\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\n   *     }\n   *\n   * @param {Object} request an http.ServerRequest.\n   * @param {Object} options an optional options object with:\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\n   *                   - headers: required header names (def: date or x-date)\n   *                   - algorithms: algorithms to support (default: all).\n   *                   - strict: should enforce latest spec parsing\n   *                             (default: false).\n   * @return {Object} parsed out object (see above).\n   * @throws {TypeError} on invalid input.\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\n   * @throws {MissingHeaderError} if the params indicate a header not present,\n   *                              either in the request headers from the params,\n   *                              or not in the params from a required header\n   *                              in options.\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\n   *                              mode.\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\n   */\n  parseRequest: function parseRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(request.headers, 'request.headers');\n    if (options === undefined) {\n      options = {};\n    }\n    if (options.headers === undefined) {\n      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];\n    }\n    assert.object(options, 'options');\n    assert.arrayOfString(options.headers, 'options.headers');\n    assert.optionalNumber(options.clockSkew, 'options.clockSkew');\n\n    if (!request.headers.authorization)\n      throw new MissingHeaderError('no authorization header present in ' +\n                                   'the request');\n\n    options.clockSkew = options.clockSkew || 300;\n\n\n    var i = 0;\n    var state = State.New;\n    var substate = ParamsState.Name;\n    var tmpName = '';\n    var tmpValue = '';\n\n    var parsed = {\n      scheme: '',\n      params: {},\n      signingString: '',\n\n      get algorithm() {\n        return this.params.algorithm.toUpperCase();\n      },\n\n      get keyId() {\n        return this.params.keyId;\n      }\n    };\n\n    var authz = request.headers.authorization;\n    for (i = 0; i < authz.length; i++) {\n      var c = authz.charAt(i);\n\n      switch (Number(state)) {\n\n      case State.New:\n        if (c !== ' ') parsed.scheme += c;\n        else state = State.Params;\n        break;\n\n      case State.Params:\n        switch (Number(substate)) {\n\n        case ParamsState.Name:\n          var code = c.charCodeAt(0);\n          // restricted name of A-Z / a-z\n          if ((code >= 0x41 && code <= 0x5a) || // A-Z\n              (code >= 0x61 && code <= 0x7a)) { // a-z\n            tmpName += c;\n          } else if (c === '=') {\n            if (tmpName.length === 0)\n              throw new InvalidHeaderError('bad param format');\n            substate = ParamsState.Quote;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        case ParamsState.Quote:\n          if (c === '\"') {\n            tmpValue = '';\n            substate = ParamsState.Value;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        case ParamsState.Value:\n          if (c === '\"') {\n            parsed.params[tmpName] = tmpValue;\n            substate = ParamsState.Comma;\n          } else {\n            tmpValue += c;\n          }\n          break;\n\n        case ParamsState.Comma:\n          if (c === ',') {\n            tmpName = '';\n            substate = ParamsState.Name;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        default:\n          throw new Error('Invalid substate');\n        }\n        break;\n\n      default:\n        throw new Error('Invalid substate');\n      }\n\n    }\n\n    if (!parsed.params.headers || parsed.params.headers === '') {\n      if (request.headers['x-date']) {\n        parsed.params.headers = ['x-date'];\n      } else {\n        parsed.params.headers = ['date'];\n      }\n    } else {\n      parsed.params.headers = parsed.params.headers.split(' ');\n    }\n\n    // Minimally validate the parsed object\n    if (!parsed.scheme || parsed.scheme !== 'Signature')\n      throw new InvalidHeaderError('scheme was not \"Signature\"');\n\n    if (!parsed.params.keyId)\n      throw new InvalidHeaderError('keyId was not specified');\n\n    if (!parsed.params.algorithm)\n      throw new InvalidHeaderError('algorithm was not specified');\n\n    if (!parsed.params.signature)\n      throw new InvalidHeaderError('signature was not specified');\n\n    // Check the algorithm against the official list\n    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\n    try {\n      validateAlgorithm(parsed.params.algorithm);\n    } catch (e) {\n      if (e instanceof InvalidAlgorithmError)\n        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +\n          'supported'));\n      else\n        throw (e);\n    }\n\n    // Build the signingString\n    for (i = 0; i < parsed.params.headers.length; i++) {\n      var h = parsed.params.headers[i].toLowerCase();\n      parsed.params.headers[i] = h;\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /*\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          parsed.signingString +=\n            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        parsed.signingString +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.url;\n      } else {\n        var value = request.headers[h];\n        if (value === undefined)\n          throw new MissingHeaderError(h + ' was not in the request');\n        parsed.signingString += h + ': ' + value;\n      }\n\n      if ((i + 1) < parsed.params.headers.length)\n        parsed.signingString += '\\n';\n    }\n\n    // Check against the constraints\n    var date;\n    if (request.headers.date || request.headers['x-date']) {\n        if (request.headers['x-date']) {\n          date = new Date(request.headers['x-date']);\n        } else {\n          date = new Date(request.headers.date);\n        }\n      var now = new Date();\n      var skew = Math.abs(now.getTime() - date.getTime());\n\n      if (skew > options.clockSkew * 1000) {\n        throw new ExpiredRequestError('clock skew of ' +\n                                      (skew / 1000) +\n                                      's was greater than ' +\n                                      options.clockSkew + 's');\n      }\n    }\n\n    options.headers.forEach(function (hdr) {\n      // Remember that we already checked any headers in the params\n      // were in the request, so if this passes we're good.\n      if (parsed.params.headers.indexOf(hdr) < 0)\n        throw new MissingHeaderError(hdr + ' was not a signed header');\n    });\n\n    if (options.algorithms) {\n      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)\n        throw new InvalidParamsError(parsed.params.algorithm +\n                                     ' is not a supported algorithm');\n    }\n\n    return parsed;\n  }\n\n};\n"]}