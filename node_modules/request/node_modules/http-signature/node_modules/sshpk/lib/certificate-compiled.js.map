{"version":3,"sources":["certificate.js"],"names":[],"mappings":"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","file":"certificate-compiled.js","sourcesContent":["// Copyright 2016 Joyent, Inc.\n\nmodule.exports = Certificate;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar Identity = require('./identity');\n\nvar formats = {};\nformats['openssh'] = require('./formats/openssh-cert');\nformats['x509'] = require('./formats/x509');\nformats['pem'] = require('./formats/x509-pem');\n\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Certificate(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.subjects, 'options.subjects');\n\tutils.assertCompatible(opts.subjects[0], Identity, [1, 0],\n\t    'options.subjects');\n\tutils.assertCompatible(opts.subjectKey, Key, [1, 0],\n\t    'options.subjectKey');\n\tutils.assertCompatible(opts.issuer, Identity, [1, 0], 'options.issuer');\n\tif (opts.issuerKey !== undefined) {\n\t\tutils.assertCompatible(opts.issuerKey, Key, [1, 0],\n\t\t    'options.issuerKey');\n\t}\n\tassert.object(opts.signatures, 'options.signatures');\n\tassert.buffer(opts.serial, 'options.serial');\n\tassert.date(opts.validFrom, 'options.validFrom');\n\tassert.date(opts.validUntil, 'optons.validUntil');\n\n\tthis._hashCache = {};\n\n\tthis.subjects = opts.subjects;\n\tthis.issuer = opts.issuer;\n\tthis.subjectKey = opts.subjectKey;\n\tthis.issuerKey = opts.issuerKey;\n\tthis.signatures = opts.signatures;\n\tthis.serial = opts.serial;\n\tthis.validFrom = opts.validFrom;\n\tthis.validUntil = opts.validUntil;\n}\n\nCertificate.formats = formats;\n\nCertificate.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'x509';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nCertificate.prototype.toString = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pem';\n\treturn (this.toBuffer(format, options).toString());\n};\n\nCertificate.prototype.fingerprint = function (algo) {\n\tif (algo === undefined)\n\t\talgo = 'sha256';\n\tassert.string(algo, 'algorithm');\n\tvar opts = {\n\t\ttype: 'certificate',\n\t\thash: this.hash(algo),\n\t\talgorithm: algo\n\t};\n\treturn (new Fingerprint(opts));\n};\n\nCertificate.prototype.hash = function (algo) {\n\tassert.string(algo, 'algorithm');\n\talgo = algo.toLowerCase();\n\tif (algs.hashAlgs[algo] === undefined)\n\t\tthrow (new InvalidAlgorithmError(algo));\n\n\tif (this._hashCache[algo])\n\t\treturn (this._hashCache[algo]);\n\n\tvar hash = crypto.createHash(algo).\n\t    update(this.toBuffer('x509')).digest();\n\tthis._hashCache[algo] = hash;\n\treturn (hash);\n};\n\nCertificate.prototype.isExpired = function (when) {\n\tif (when === undefined)\n\t\twhen = new Date();\n\treturn (!((when.getTime() >= this.validFrom.getTime()) &&\n\t\t(when.getTime() < this.validUntil.getTime())));\n};\n\nCertificate.prototype.isSignedBy = function (issuerCert) {\n\tutils.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');\n\n\tif (!this.issuer.equals(issuerCert.subjects[0]))\n\t\treturn (false);\n\n\treturn (this.isSignedByKey(issuerCert.subjectKey));\n};\n\nCertificate.prototype.isSignedByKey = function (issuerKey) {\n\tutils.assertCompatible(issuerKey, Key, [1, 2], 'issuerKey');\n\n\tif (this.issuerKey !== undefined) {\n\t\treturn (this.issuerKey.\n\t\t    fingerprint('sha512').matches(issuerKey));\n\t}\n\n\tvar fmt = Object.keys(this.signatures)[0];\n\tvar valid = formats[fmt].verify(this, issuerKey);\n\tif (valid)\n\t\tthis.issuerKey = issuerKey;\n\treturn (valid);\n};\n\nCertificate.prototype.signWith = function (key) {\n\tutils.assertCompatible(key, PrivateKey, [1, 2], 'key');\n\tvar fmts = Object.keys(formats);\n\tvar didOne = false;\n\tfor (var i = 0; i < fmts.length; ++i) {\n\t\tif (fmts[i] !== 'pem') {\n\t\t\tvar ret = formats[fmts[i]].sign(this, key);\n\t\t\tif (ret === true)\n\t\t\t\tdidOne = true;\n\t\t}\n\t}\n\tif (!didOne) {\n\t\tthrow (new Error('Failed to sign the certificate for any ' +\n\t\t    'available certificate formats'));\n\t}\n};\n\nCertificate.createSelfSigned = function (subjectOrSubjects, key, options) {\n\tvar subjects;\n\tif (Array.isArray(subjectOrSubjects))\n\t\tsubjects = subjectOrSubjects;\n\telse\n\t\tsubjects = [subjectOrSubjects];\n\n\tassert.arrayOfObject(subjects);\n\tsubjects.forEach(function (subject) {\n\t\tutils.assertCompatible(subject, Identity, [1, 0], 'subject');\n\t});\n\n\tutils.assertCompatible(key, PrivateKey, [1, 2], 'private key');\n\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalObject(options.validFrom, 'options.validFrom');\n\tassert.optionalObject(options.validUntil, 'options.validUntil');\n\tvar validFrom = options.validFrom;\n\tvar validUntil = options.validUntil;\n\tif (validFrom === undefined)\n\t\tvalidFrom = new Date();\n\tif (validUntil === undefined) {\n\t\tassert.optionalNumber(options.lifetime, 'options.lifetime');\n\t\tvar lifetime = options.lifetime;\n\t\tif (lifetime === undefined)\n\t\t\tlifetime = 10*365*24*3600;\n\t\tvalidUntil = new Date();\n\t\tvalidUntil.setTime(validUntil.getTime() + lifetime*1000);\n\t}\n\tassert.optionalBuffer(options.serial, 'options.serial');\n\tvar serial = options.serial;\n\tif (serial === undefined)\n\t\tserial = new Buffer('0000000000000001', 'hex');\n\n\tvar cert = new Certificate({\n\t\tsubjects: subjects,\n\t\tissuer: subjects[0],\n\t\tsubjectKey: key.toPublic(),\n\t\tissuerKey: key.toPublic(),\n\t\tsignatures: {},\n\t\tserial: serial,\n\t\tvalidFrom: validFrom,\n\t\tvalidUntil: validUntil\n\t});\n\tcert.signWith(key);\n\n\treturn (cert);\n};\n\nCertificate.create =\n    function (subjectOrSubjects, key, issuer, issuerKey, options) {\n\tvar subjects;\n\tif (Array.isArray(subjectOrSubjects))\n\t\tsubjects = subjectOrSubjects;\n\telse\n\t\tsubjects = [subjectOrSubjects];\n\n\tassert.arrayOfObject(subjects);\n\tsubjects.forEach(function (subject) {\n\t\tutils.assertCompatible(subject, Identity, [1, 0], 'subject');\n\t});\n\n\tutils.assertCompatible(key, Key, [1, 0], 'key');\n\tif (PrivateKey.isPrivateKey(key))\n\t\tkey = key.toPublic();\n\tutils.assertCompatible(issuer, Identity, [1, 0], 'issuer');\n\tutils.assertCompatible(issuerKey, PrivateKey, [1, 2], 'issuer key');\n\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalObject(options.validFrom, 'options.validFrom');\n\tassert.optionalObject(options.validUntil, 'options.validUntil');\n\tvar validFrom = options.validFrom;\n\tvar validUntil = options.validUntil;\n\tif (validFrom === undefined)\n\t\tvalidFrom = new Date();\n\tif (validUntil === undefined) {\n\t\tassert.optionalNumber(options.lifetime, 'options.lifetime');\n\t\tvar lifetime = options.lifetime;\n\t\tif (lifetime === undefined)\n\t\t\tlifetime = 10*365*24*3600;\n\t\tvalidUntil = new Date();\n\t\tvalidUntil.setTime(validUntil.getTime() + lifetime*1000);\n\t}\n\tassert.optionalBuffer(options.serial, 'options.serial');\n\tvar serial = options.serial;\n\tif (serial === undefined)\n\t\tserial = new Buffer('0000000000000001', 'hex');\n\n\tvar cert = new Certificate({\n\t\tsubjects: subjects,\n\t\tissuer: issuer,\n\t\tsubjectKey: key,\n\t\tissuerKey: issuerKey.toPublic(),\n\t\tsignatures: {},\n\t\tserial: serial,\n\t\tvalidFrom: validFrom,\n\t\tvalidUntil: validUntil\n\t});\n\tcert.signWith(issuerKey);\n\n\treturn (cert);\n};\n\nCertificate.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\treturn (k);\n\t} catch (e) {\n\t\tthrow (new CertificateParseError(options.filename, format, e));\n\t}\n};\n\nCertificate.isCertificate = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Certificate, ver));\n};\n\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n */\nCertificate.prototype._sshpkApiVersion = [1, 0];\n\nCertificate._oldVersionDetect = function (obj) {\n\treturn ([1, 0]);\n};\n"]}