{"version":3,"sources":["ssh-private.js"],"names":[],"mappings":"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","file":"ssh-private-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadSSHPrivate: readSSHPrivate,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\nvar errors = require('../errors');\n\nvar bcrypt;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options));\n}\n\nvar MAGIC = 'openssh-key-v1';\n\nfunction readSSHPrivate(type, buf, options) {\n\tbuf = new SSHBuffer({buffer: buf});\n\n\tvar magic = buf.readCString();\n\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\tvar cipher = buf.readString();\n\tvar kdf = buf.readString();\n\tvar kdfOpts = buf.readBuffer();\n\n\tvar nkeys = buf.readInt();\n\tif (nkeys !== 1) {\n\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t    'multiple keys: this is unsupported.'));\n\t}\n\n\tvar pubKey = buf.readBuffer();\n\n\tif (type === 'public') {\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\treturn (rfc4253.read(pubKey));\n\t}\n\n\tvar privKeyBlob = buf.readBuffer();\n\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\tvar kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });\n\tswitch (kdf) {\n\tcase 'none':\n\t\tif (cipher !== 'none') {\n\t\t\tthrow (new Error('OpenSSH-format key uses KDF \"none\" ' +\n\t\t\t     'but specifies a cipher other than \"none\"'));\n\t\t}\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = kdfOptsBuf.readBuffer();\n\t\tvar rounds = kdfOptsBuf.readInt();\n\t\tvar cinf = utils.opensshCipherInfo(cipher);\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\n\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\toptions.passphrase = new Buffer(options.passphrase,\n\t\t\t    'utf-8');\n\t\t}\n\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t    options.filename, 'OpenSSH'));\n\t\t}\n\n\t\tvar pass = new Uint8Array(options.passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = new Buffer(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\t\tvar cipherStream = crypto.createDecipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privKeyBlob);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivKeyBlob = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'OpenSSH-format key uses unknown KDF \"' + kdf + '\"'));\n\t}\n\n\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\tvar checkInt1 = buf.readInt();\n\tvar checkInt2 = buf.readInt();\n\tif (checkInt1 !== checkInt2) {\n\t\tthrow (new Error('Incorrect passphrase supplied, could not ' +\n\t\t    'decrypt key'));\n\t}\n\n\tvar ret = {};\n\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\tbuf.skip(ret.consumed);\n\n\tvar comment = buf.readString();\n\tkey.comment = comment;\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tvar pubKey;\n\tif (PrivateKey.isPrivateKey(key))\n\t\tpubKey = key.toPublic();\n\telse\n\t\tpubKey = key;\n\n\tvar cipher = 'none';\n\tvar kdf = 'none';\n\tvar kdfopts = new Buffer(0);\n\tvar cinf = { blockSize: 8 };\n\tvar passphrase;\n\tif (options !== undefined) {\n\t\tpassphrase = options.passphrase;\n\t\tif (typeof (passphrase) === 'string')\n\t\t\tpassphrase = new Buffer(passphrase, 'utf-8');\n\t\tif (passphrase !== undefined) {\n\t\t\tassert.buffer(passphrase, 'options.passphrase');\n\t\t\tassert.optionalString(options.cipher, 'options.cipher');\n\t\t\tcipher = options.cipher;\n\t\t\tif (cipher === undefined)\n\t\t\t\tcipher = 'aes128-ctr';\n\t\t\tcinf = utils.opensshCipherInfo(cipher);\n\t\t\tkdf = 'bcrypt';\n\t\t}\n\t}\n\n\tvar privBuf;\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tprivBuf = new SSHBuffer({});\n\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\tprivBuf.writeString(key.comment || '');\n\n\t\tvar n = 1;\n\t\twhile (privBuf._offset % cinf.blockSize !== 0)\n\t\t\tprivBuf.writeChar(n++);\n\t\tprivBuf = privBuf.toBuffer();\n\t}\n\n\tswitch (kdf) {\n\tcase 'none':\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = crypto.randomBytes(16);\n\t\tvar rounds = 16;\n\t\tvar kdfssh = new SSHBuffer({});\n\t\tkdfssh.writeBuffer(salt);\n\t\tkdfssh.writeInt(rounds);\n\t\tkdfopts = kdfssh.toBuffer();\n\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\t\tvar pass = new Uint8Array(passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = new Buffer(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\n\t\tvar cipherStream = crypto.createCipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privBuf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivBuf = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported kdf ' + kdf));\n\t}\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeCString(MAGIC);\n\tbuf.writeString(cipher);\t/* cipher */\n\tbuf.writeString(kdf);\t\t/* kdf */\n\tbuf.writeBuffer(kdfopts);\t/* kdfoptions */\n\n\tbuf.writeInt(1);\t\t/* nkeys */\n\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\tif (privBuf)\n\t\tbuf.writeBuffer(privBuf);\n\n\tbuf = buf.toBuffer();\n\n\tvar header;\n\tif (PrivateKey.isPrivateKey(key))\n\t\theader = 'OPENSSH PRIVATE KEY';\n\telse\n\t\theader = 'OPENSSH PUBLIC KEY';\n\n\tvar tmp = buf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 70) +\n\t    18 + 16 + header.length*2 + 10;\n\tbuf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 70;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}