{"version":3,"sources":["openssh-cert.js"],"names":[],"mappings":"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","file":"openssh-cert-compiled.js","sourcesContent":["// Copyright 2016 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\tverify: verify,\n\tsign: sign,\n\twrite: write,\n\n\t/* Internal private API */\n\tfromBuffer: fromBuffer,\n\ttoBuffer: toBuffer\n};\n\nvar assert = require('assert-plus');\nvar SSHBuffer = require('../ssh-buffer');\nvar crypto = require('crypto');\nvar algs = require('../algs');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar Identity = require('../identity');\nvar rfc4253 = require('./rfc4253');\nvar Signature = require('../signature');\nvar utils = require('../utils');\nvar Certificate = require('../certificate');\n\nfunction verify(cert, key) {\n\t/*\n\t * We always give an issuerKey, so if our verify() is being called then\n\t * there was no signature. Return false.\n\t */\n\treturn (false);\n}\n\nvar TYPES = {\n\t'user': 1,\n\t'host': 2\n};\nObject.keys(TYPES).forEach(function (k) { TYPES[TYPES[k]] = k; });\n\nvar ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\n\nfunction read(buf, options) {\n\tif (Buffer.isBuffer(buf))\n\t\tbuf = buf.toString('ascii');\n\tvar parts = buf.trim().split(/[ \\t\\n]+/g);\n\tif (parts.length < 2 || parts.length > 3)\n\t\tthrow (new Error('Not a valid SSH certificate line'));\n\n\tvar algo = parts[0];\n\tvar data = parts[1];\n\n\tdata = new Buffer(data, 'base64');\n\treturn (fromBuffer(data, algo));\n}\n\nfunction fromBuffer(data, algo, partial) {\n\tvar sshbuf = new SSHBuffer({ buffer: data });\n\tvar innerAlgo = sshbuf.readString();\n\tif (algo !== undefined && innerAlgo !== algo)\n\t\tthrow (new Error('SSH certificate algorithm mismatch'));\n\tif (algo === undefined)\n\t\talgo = innerAlgo;\n\n\tvar cert = {};\n\tcert.signatures = {};\n\tcert.signatures.openssh = {};\n\n\tcert.signatures.openssh.nonce = sshbuf.readBuffer();\n\n\tvar key = {};\n\tvar parts = (key.parts = []);\n\tkey.type = getAlg(algo);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\twhile (parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\tassert.ok(parts.length >= 1, 'key must have at least one part');\n\n\tvar algInfo = algs.info[key.type];\n\tif (key.type === 'ecdsa') {\n\t\tvar res = ECDSA_ALGO.exec(algo);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tparts[i].name = algInfo.parts[i];\n\t\tif (parts[i].name !== 'curve' &&\n\t\t    algInfo.normalize !== false) {\n\t\t\tvar p = parts[i];\n\t\t\tp.data = utils.mpNormalize(p.data);\n\t\t}\n\t}\n\n\tcert.subjectKey = new Key(key);\n\n\tcert.serial = sshbuf.readInt64();\n\n\tvar type = TYPES[sshbuf.readInt()];\n\tassert.string(type, 'valid cert type');\n\n\tcert.signatures.openssh.keyId = sshbuf.readString();\n\n\tvar principals = [];\n\tvar pbuf = sshbuf.readBuffer();\n\tvar psshbuf = new SSHBuffer({ buffer: pbuf });\n\twhile (!psshbuf.atEnd())\n\t\tprincipals.push(psshbuf.readString());\n\tif (principals.length === 0)\n\t\tprincipals = ['*'];\n\n\tcert.subjects = principals.map(function (pr) {\n\t\tif (type === 'user')\n\t\t\treturn (Identity.forUser(pr));\n\t\telse if (type === 'host')\n\t\t\treturn (Identity.forHost(pr));\n\t\tthrow (new Error('Unknown identity type ' + type));\n\t});\n\n\tcert.validFrom = int64ToDate(sshbuf.readInt64());\n\tcert.validUntil = int64ToDate(sshbuf.readInt64());\n\n\tcert.signatures.openssh.critical = sshbuf.readBuffer();\n\tcert.signatures.openssh.exts = sshbuf.readBuffer();\n\n\t/* reserved */\n\tsshbuf.readBuffer();\n\n\tvar signingKeyBuf = sshbuf.readBuffer();\n\tcert.issuerKey = rfc4253.read(signingKeyBuf);\n\n\t/*\n\t * OpenSSH certs don't give the identity of the issuer, just their\n\t * public key. So, we use an Identity that matches anything. The\n\t * isSignedBy() function will later tell you if the key matches.\n\t */\n\tcert.issuer = Identity.forHost('**');\n\n\tvar sigBuf = sshbuf.readBuffer();\n\tcert.signatures.openssh.signature =\n\t    Signature.parse(sigBuf, cert.issuerKey.type, 'ssh');\n\n\tif (partial !== undefined) {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Certificate(cert));\n}\n\nfunction int64ToDate(buf) {\n\tvar i = buf.readUInt32BE(0) * 4294967296;\n\ti += buf.readUInt32BE(4);\n\tvar d = new Date();\n\td.setTime(i * 1000);\n\td.sourceInt64 = buf;\n\treturn (d);\n}\n\nfunction dateToInt64(date) {\n\tif (date.sourceInt64 !== undefined)\n\t\treturn (date.sourceInt64);\n\tvar i = Math.round(date.getTime() / 1000);\n\tvar upper = Math.floor(i / 4294967296);\n\tvar lower = Math.floor(i % 4294967296);\n\tvar buf = new Buffer(8);\n\tbuf.writeUInt32BE(upper, 0);\n\tbuf.writeUInt32BE(lower, 4);\n\treturn (buf);\n}\n\nfunction sign(cert, key) {\n\tif (cert.signatures.openssh === undefined)\n\t\tcert.signatures.openssh = {};\n\ttry {\n\t\tvar blob = toBuffer(cert, true);\n\t} catch (e) {\n\t\tdelete (cert.signatures.openssh);\n\t\treturn (false);\n\t}\n\tvar sig = cert.signatures.openssh;\n\tvar hashAlgo = undefined;\n\tif (key.type === 'rsa' || key.type === 'dsa')\n\t\thashAlgo = 'sha1';\n\tvar signer = key.createSign(hashAlgo);\n\tsigner.write(blob);\n\tsig.signature = signer.sign();\n\treturn (true);\n}\n\nfunction write(cert, options) {\n\tif (options === undefined)\n\t\toptions = {};\n\n\tvar blob = toBuffer(cert);\n\tvar out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');\n\tif (options.comment)\n\t\tout = out + ' ' + options.comment;\n\treturn (out);\n}\n\n\nfunction toBuffer(cert, noSig) {\n\tassert.object(cert.signatures.openssh, 'signature for openssh format');\n\tvar sig = cert.signatures.openssh;\n\n\tif (sig.nonce === undefined)\n\t\tsig.nonce = crypto.randomBytes(16);\n\tvar buf = new SSHBuffer({});\n\tbuf.writeString(getCertType(cert.subjectKey));\n\tbuf.writeBuffer(sig.nonce);\n\n\tvar key = cert.subjectKey;\n\tvar algInfo = algs.info[key.type];\n\talgInfo.parts.forEach(function (part) {\n\t\tbuf.writePart(key.part[part]);\n\t});\n\n\tbuf.writeInt64(cert.serial);\n\n\tvar type = cert.subjects[0].type;\n\tassert.notStrictEqual(type, 'unknown');\n\tcert.subjects.forEach(function (id) {\n\t\tassert.strictEqual(id.type, type);\n\t});\n\ttype = TYPES[type];\n\tbuf.writeInt(type);\n\n\tif (sig.keyId === undefined) {\n\t\tsig.keyId = cert.subjects[0].type + '_' +\n\t\t    (cert.subjects[0].uid || cert.subjects[0].hostname);\n\t}\n\tbuf.writeString(sig.keyId);\n\n\tvar sub = new SSHBuffer({});\n\tcert.subjects.forEach(function (id) {\n\t\tif (type === TYPES.host)\n\t\t\tsub.writeString(id.hostname);\n\t\telse if (type === TYPES.user)\n\t\t\tsub.writeString(id.uid);\n\t});\n\tbuf.writeBuffer(sub.toBuffer());\n\n\tbuf.writeInt64(dateToInt64(cert.validFrom));\n\tbuf.writeInt64(dateToInt64(cert.validUntil));\n\n\tif (sig.critical === undefined)\n\t\tsig.critical = new Buffer(0);\n\tbuf.writeBuffer(sig.critical);\n\n\tif (sig.exts === undefined)\n\t\tsig.exts = new Buffer(0);\n\tbuf.writeBuffer(sig.exts);\n\n\t/* reserved */\n\tbuf.writeBuffer(new Buffer(0));\n\n\tsub = rfc4253.write(cert.issuerKey);\n\tbuf.writeBuffer(sub);\n\n\tif (!noSig)\n\t\tbuf.writeBuffer(sig.signature.toBuffer('ssh'));\n\n\treturn (buf.toBuffer());\n}\n\nfunction getAlg(certType) {\n\tif (certType === 'ssh-rsa-cert-v01@openssh.com')\n\t\treturn ('rsa');\n\tif (certType === 'ssh-dss-cert-v01@openssh.com')\n\t\treturn ('dsa');\n\tif (certType.match(ECDSA_ALGO))\n\t\treturn ('ecdsa');\n\tif (certType === 'ssh-ed25519-cert-v01@openssh.com')\n\t\treturn ('ed25519');\n\tthrow (new Error('Unsupported cert type ' + certType));\n}\n\nfunction getCertType(key) {\n\tif (key.type === 'rsa')\n\t\treturn ('ssh-rsa-cert-v01@openssh.com');\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss-cert-v01@openssh.com');\n\tif (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com');\n\tif (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519-cert-v01@openssh.com');\n\tthrow (new Error('Unsupported key type ' + key.type));\n}\n"]}