{"version":3,"sources":["tst.werror.js"],"names":[],"mappings":"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","file":"tst.werror-compiled.js","sourcesContent":["/*\n * tst.werror.js: tests basic functionality of the WError class.\n */\n\nvar mod_assert = require('assert');\nvar mod_verror = require('../lib/verror');\n\nvar VError = mod_verror.VError;\nvar WError = mod_verror.WError;\n\nvar err, suberr, stack, substack;\n\n/*\n * Remove full paths and relative line numbers from stack traces so that we can\n * compare against \"known-good\" output.\n */\nfunction cleanStack(stacktxt)\n{\n\tvar re = new RegExp(__filename + ':\\\\d+:\\\\d+', 'gm');\n\tstacktxt = stacktxt.replace(re, 'tst.werror.js');\n\treturn (stacktxt);\n}\n\n/*\n * Save the generic parts of all stack traces so we can avoid hardcoding\n * Node-specific implementation details in our testing of stack traces.\n */\nvar nodestack = new Error().stack.split('\\n').slice(2).join('\\n');\n\n/* no arguments */\nerr = new WError();\nmod_assert.equal(err.name, 'WError');\nmod_assert.ok(err instanceof Error);\nmod_assert.ok(err instanceof WError);\nmod_assert.equal(err.message, '');\nmod_assert.equal(err.toString(), 'WError');\nmod_assert.ok(err.cause() === undefined);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'WError',\n    '    at Object.<anonymous> (tst.werror.js)'\n].join('\\n') + '\\n' + nodestack);\n\n/* options-argument form */\nerr = new WError({});\nmod_assert.equal(err.message, '');\nmod_assert.equal(err.toString(), 'WError');\nmod_assert.ok(err.cause() === undefined);\n\n/* simple message */\nerr = new WError('my error');\nmod_assert.equal(err.message, 'my error');\nmod_assert.equal(err.toString(), 'WError: my error');\nmod_assert.ok(err.cause() === undefined);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'WError: my error',\n    '    at Object.<anonymous> (tst.werror.js)'\n].join('\\n') + '\\n' + nodestack);\n\nerr = new WError({}, 'my error');\nmod_assert.equal(err.message, 'my error');\nmod_assert.equal(err.toString(), 'WError: my error');\nmod_assert.ok(err.cause() === undefined);\n\n/* printf-style message */\nerr = new WError('%s error: %3d problems', 'very bad', 15);\nmod_assert.equal(err.message, 'very bad error:  15 problems');\nmod_assert.equal(err.toString(), 'WError: very bad error:  15 problems');\nmod_assert.ok(err.cause() === undefined);\n\nerr = new WError({}, '%s error: %3d problems', 'very bad', 15);\nmod_assert.equal(err.message, 'very bad error:  15 problems');\nmod_assert.equal(err.toString(), 'WError: very bad error:  15 problems');\nmod_assert.ok(err.cause() === undefined);\n\n/* caused by another error, with no additional message */\nsuberr = new Error('root cause');\nerr = new WError(suberr);\nmod_assert.equal(err.message, '');\nmod_assert.equal(err.toString(), 'WError; caused by Error: root cause');\nmod_assert.ok(err.cause() === suberr);\n\nerr = new WError({ 'cause': suberr });\nmod_assert.equal(err.message, '');\nmod_assert.equal(err.toString(), 'WError; caused by Error: root cause');\nmod_assert.ok(err.cause() === suberr);\n\n/* caused by another error, with annotation */\nerr = new WError(suberr, 'proximate cause: %d issues', 3);\nmod_assert.equal(err.message, 'proximate cause: 3 issues');\nmod_assert.equal(err.toString(), 'WError: proximate cause: 3 issues; ' +\n    'caused by Error: root cause');\nmod_assert.ok(err.cause() === suberr);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'WError: proximate cause: 3 issues; caused by Error: root cause',\n    '    at Object.<anonymous> (tst.werror.js)'\n].join('\\n') + '\\n' + nodestack);\n\nerr = new WError({ 'cause': suberr }, 'proximate cause: %d issues', 3);\nmod_assert.equal(err.message, 'proximate cause: 3 issues');\nmod_assert.equal(err.toString(), 'WError: proximate cause: 3 issues; ' +\n    'caused by Error: root cause');\nmod_assert.ok(err.cause() === suberr);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'WError: proximate cause: 3 issues; caused by Error: root cause',\n    '    at Object.<anonymous> (tst.werror.js)'\n].join('\\n') + '\\n' + nodestack);\n\n/* caused by another WError, with annotation. */\nsuberr = err;\nerr = new WError(suberr, 'top');\nmod_assert.equal(err.message, 'top');\nmod_assert.equal(err.toString(), 'WError: top; caused by WError: ' +\n    'proximate cause: 3 issues; caused by Error: root cause');\nmod_assert.ok(err.cause() === suberr);\n\nerr = new WError({ 'cause': suberr }, 'top');\nmod_assert.equal(err.message, 'top');\nmod_assert.equal(err.toString(), 'WError: top; caused by WError: ' +\n    'proximate cause: 3 issues; caused by Error: root cause');\nmod_assert.ok(err.cause() === suberr);\n\n/* caused by a VError */\nsuberr = new VError(new Error('root cause'), 'mid');\nerr = new WError(suberr, 'top');\nmod_assert.equal(err.message, 'top');\nmod_assert.equal(err.toString(),\n    'WError: top; caused by VError: mid: root cause');\nmod_assert.ok(err.cause() === suberr);\n\n/* null cause (for backwards compatibility with older versions) */\nerr = new WError(null, 'my error');\nmod_assert.equal(err.message, 'my error');\nmod_assert.equal(err.toString(), 'WError: my error');\nmod_assert.ok(err.cause() === undefined);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'WError: my error',\n    '    at Object.<anonymous> (tst.werror.js)'\n].join('\\n') + '\\n' + nodestack);\n\nerr = new WError({ 'cause': null }, 'my error');\nmod_assert.equal(err.message, 'my error');\nmod_assert.equal(err.toString(), 'WError: my error');\nmod_assert.ok(err.cause() === undefined);\n\nerr = new WError(null);\nmod_assert.equal(err.message, '');\nmod_assert.equal(err.toString(), 'WError');\nmod_assert.ok(err.cause() === undefined);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'WError',\n    '    at Object.<anonymous> (tst.werror.js)'\n].join('\\n') + '\\n' + nodestack);\n\n/* constructorOpt */\nfunction makeErr(options) {\n\treturn (new WError(options, 'test error'));\n}\nerr = makeErr({});\nmod_assert.equal(err.toString(), 'WError: test error');\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'WError: test error',\n    '    at makeErr (tst.werror.js)',\n    '    at Object.<anonymous> (tst.werror.js)'\n].join('\\n') + '\\n' + nodestack);\n\nerr = makeErr({ 'constructorOpt': makeErr });\nmod_assert.equal(err.toString(), 'WError: test error');\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'WError: test error',\n    '    at Object.<anonymous> (tst.werror.js)'\n].join('\\n') + '\\n' + nodestack);\n"]}