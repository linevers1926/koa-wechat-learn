{"version":3,"sources":["links.js"],"names":[],"mappings":";;;;;AAKC,WAAU,IAAV,EAAgB,OAAhB,EAAyB;AACtB,KAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAA3C,EAAgD;;AAE5C,SAAO,EAAP,EAAW,YAAY;AACnB,UAAO,SAAP;AACH,GAFD;AAGH,EALD,MAKO,IAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAzC,EAAkD;;;;AAIrD,SAAO,OAAP,GAAiB,SAAjB;AACH,EALM,MAKA;;AAEH,OAAK,eAAL,GAAuB,SAAvB;AACH;AACJ,CAfA,EAeC,IAfD,EAeO,YAAY;;AACpB,KAAI,UAAU,EAAd;AACA,SAAQ,UAAR,GAAqB,IAArB;AACA,SAAQ,OAAR,GAAkB,UAAS,QAAT,EAAmB,QAAnB,EAA6B,MAA7B,EAAoC;;;;;;;;AAQrD,MAAI,QAAQ,OAAO,eAAnB;AACA,MAAG,CAAC,KAAJ,EAAU;AACT,WAAQ,EAAR;AACA,OAAI,cAAc,OAAO,KAAzB;AACA,OAAG,eAAe,uBAAuB,KAAzC,EAA+C;AAC9C,gBAAY,OAAZ,CAAoB,UAAS,IAAT,EAAc;;;;;;;AAOjC,WAAM,KAAK,GAAX,IAAkB,KAAK,IAAvB;AACA,KARD;AASA;AACD,OAAG,QAAQ,UAAX,EAAsB;AACrB,WAAO,eAAP,GAAyB,KAAzB;AACA;AACD;AACD,MAAI,eAAe,MAAM,QAAN,CAAnB;AACA,SAAO,gBAAgB,QAAQ,UAAR,CAAmB,YAAnB,EAAiC,QAAjC,CAAvB;AACA,EA7BD;;AA+BA,SAAQ,UAAR,GAAqB,UAAS,YAAT,EAAuB,QAAvB,EAAgC;AACpD,SAAO,aAAa,OAAb,CAAqB,eAArB,EAAsC,UAAS,CAAT,EAAY,QAAZ,EAAqB;AAChE,OAAI,QAAQ,SAAS,mBAAmB,QAAnB,CAAT,CAAZ;AACA,OAAG,iBAAiB,KAApB,EAA0B;;AAEzB,WAAO,MAAM,MAAM,IAAN,CAAW,GAAX,CAAN,GAAwB,GAA/B;AACA;AACD,UAAO,KAAP;AACA,GAPK,CAAP;AAQA,EATD;AAUA,QAAO,OAAP;AACC,CA5DA,CAAD","file":"links-compiled.js","sourcesContent":["/** \r\n * JSON Schema link handler\r\n * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)\r\n * Licensed under the MIT (MIT-LICENSE.txt) license.\r\n */\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define([], function () {\r\n            return factory();\r\n        });\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like environments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals\r\n        root.jsonSchemaLinks = factory();\r\n    }\r\n}(this, function () {// setup primitive classes to be JSON Schema types\r\nvar exports = {};\r\nexports.cacheLinks = true;\r\nexports.getLink = function(relation, instance, schema){\r\n\t// gets the URI of the link for the given relation based on the instance and schema\r\n\t// for example:\r\n\t// getLink(\r\n\t// \t\t\"brother\", \r\n\t// \t\t{\"brother_id\":33}, \r\n\t// \t\t{links:[{rel:\"brother\", href:\"Brother/{brother_id}\"}]}) ->\r\n\t//\t\"Brother/33\"\r\n\tvar links = schema.__linkTemplates; \r\n\tif(!links){\r\n\t\tlinks = {};\r\n\t\tvar schemaLinks = schema.links;\r\n\t\tif(schemaLinks && schemaLinks instanceof Array){\r\n\t\t\tschemaLinks.forEach(function(link){\r\n\t/*\t\t\t// TODO: allow for multiple same-name relations\r\n\t\t\t\tif(links[link.rel]){\r\n\t\t\t\t\tif(!(links[link.rel] instanceof Array)){\r\n\t\t\t\t\t\tlinks[link.rel] = [links[link.rel]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}*/\r\n\t\t\t\tlinks[link.rel] = link.href;\r\n\t\t\t});\r\n\t\t}\r\n\t\tif(exports.cacheLinks){\r\n\t\t\tschema.__linkTemplates = links;\r\n\t\t}\r\n\t}\r\n\tvar linkTemplate = links[relation];\r\n\treturn linkTemplate && exports.substitute(linkTemplate, instance);\r\n};\r\n\r\nexports.substitute = function(linkTemplate, instance){\r\n\treturn linkTemplate.replace(/\\{([^\\}]*)\\}/g, function(t, property){\r\n\t\t\tvar value = instance[decodeURIComponent(property)];\r\n\t\t\tif(value instanceof Array){\r\n\t\t\t\t// the value is an array, it should produce a URI like /Table/(4,5,8) and store.get() should handle that as an array of values\r\n\t\t\t\treturn '(' + value.join(',') + ')';\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t});\r\n};\r\nreturn exports;\r\n}));"]}