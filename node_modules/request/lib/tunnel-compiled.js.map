{"version":3,"sources":["tunnel.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,MAAM,QAAQ,KAAR,CAAV;IACI,SAAS,QAAQ,cAAR,CADb;;AAGA,IAAI,8BAA8B,CAChC,QADgC,EAEhC,gBAFgC,EAGhC,iBAHgC,EAIhC,iBAJgC,EAKhC,eALgC,EAMhC,eANgC,EAOhC,kBAPgC,EAQhC,kBARgC,EAShC,kBATgC,EAUhC,aAVgC,EAWhC,eAXgC,EAYhC,cAZgC,EAahC,YAbgC,EAchC,MAdgC,EAehC,QAfgC,EAgBhC,cAhBgC,EAiBhC,QAjBgC,EAkBhC,SAlBgC,EAmBhC,IAnBgC,EAoBhC,YApBgC,EAqBhC,KArBgC,CAAlC;;AAwBA,IAAI,kCAAkC,CACpC,qBADoC,CAAtC;;AAIA,SAAS,kBAAT,CAA4B,SAA5B,EAAuC;AACrC,MAAI,OAAO,UAAU,IAArB;MACI,WAAW,UAAU,QADzB;MAEI,YAAY,UAAU,QAAV,GAAqB,GAFrC;;AAIA,MAAI,IAAJ,EAAU;AACR,iBAAa,IAAb;AACD,GAFD,MAEO,IAAI,aAAa,QAAjB,EAA2B;AAChC,iBAAa,KAAb;AACD,GAFM,MAEA;AACL,iBAAa,IAAb;AACD;;AAED,SAAO,SAAP;AACD;;AAED,SAAS,6BAAT,CAAuC,OAAvC,EAAgD,oBAAhD,EAAsE;AACpE,MAAI,YAAY,qBACb,MADa,CACN,UAAU,GAAV,EAAe,MAAf,EAAuB;AAC7B,QAAI,OAAO,WAAP,EAAJ,IAA4B,IAA5B;AACA,WAAO,GAAP;AACD,GAJa,EAIX,EAJW,CAAhB;;AAMA,SAAO,OAAO,IAAP,CAAY,OAAZ,EACJ,MADI,CACG,UAAU,MAAV,EAAkB;AACxB,WAAO,UAAU,OAAO,WAAP,EAAV,CAAP;AACD,GAHI,EAIJ,MAJI,CAIG,UAAU,GAAV,EAAe,MAAf,EAAuB;AAC7B,QAAI,MAAJ,IAAc,QAAQ,MAAR,CAAd;AACA,WAAO,GAAP;AACD,GAPI,EAOF,EAPE,CAAP;AAQD;;AAED,SAAS,sBAAT,CAAiC,OAAjC,EAA0C,YAA1C,EAAwD;AACtD,MAAI,QAAQ,QAAQ,KAApB;;AAEA,MAAI,gBAAgB;AAClB,WAAQ;AACN,YAAY,MAAM,QADZ;AAEN,YAAY,CAAC,MAAM,IAFb;AAGN,iBAAY,MAAM,IAHZ;AAIN,eAAY;AAJN,KADU;AAOlB,aAAqB,QAAQ,OAPX;AAQlB,QAAqB,QAAQ,EARX;AASlB,UAAqB,QAAQ,IATX;AAUlB,SAAqB,QAAQ,GAVX;AAWlB,gBAAqB,QAAQ,UAXX;AAYlB,SAAqB,QAAQ,GAZX;AAalB,aAAqB,QAAQ,OAbX;AAclB,wBAAqB,QAAQ,kBAdX;AAelB,mBAAqB,QAAQ,aAfX;AAgBlB,oBAAqB,QAAQ;AAhBX,GAApB;;AAmBA,SAAO,aAAP;AACD;;AAED,SAAS,qBAAT,CAA+B,GAA/B,EAAoC,KAApC,EAA2C;AACzC,MAAI,cAAe,IAAI,QAAJ,KAAiB,QAAjB,GAA4B,OAA5B,GAAsC,MAAzD;AACA,MAAI,gBAAiB,MAAM,QAAN,KAAmB,QAAnB,GAA8B,OAA9B,GAAwC,MAA7D;AACA,SAAO,CAAC,WAAD,EAAc,aAAd,EAA6B,IAA7B,CAAkC,MAAlC,CAAP;AACD;;AAED,SAAS,WAAT,CAAqB,OAArB,EAA8B;AAC5B,MAAI,MAAM,QAAQ,GAAlB;AACA,MAAI,QAAQ,QAAQ,KAApB;AACA,MAAI,eAAe,sBAAsB,GAAtB,EAA2B,KAA3B,CAAnB;AACA,SAAO,OAAO,YAAP,CAAP;AACD;;AAGD,SAAS,MAAT,CAAiB,OAAjB,EAA0B;AACxB,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,oBAAL,GAA4B,2BAA5B;AACA,OAAK,wBAAL,GAAgC,EAAhC;AACA,MAAI,OAAO,QAAQ,MAAf,KAA0B,WAA9B,EAA2C;AACzC,SAAK,cAAL,GAAsB,QAAQ,MAA9B;AACD;AACF;;AAED,OAAO,SAAP,CAAiB,SAAjB,GAA6B,YAAY;AACvC,MAAI,OAAO,IAAX;MACI,UAAU,KAAK,OADnB;;;;AAKA,MAAI,OAAO,KAAK,cAAZ,KAA+B,WAAnC,EAAgD;AAC9C,WAAO,KAAK,cAAZ;AACD;;;AAGD,MAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,QAA7B,EAAuC;AACrC,WAAO,IAAP;AACD;;;AAGD,SAAO,KAAP;AACD,CAjBD;;AAmBA,OAAO,SAAP,CAAiB,KAAjB,GAAyB,UAAU,OAAV,EAAmB;AAC1C,MAAI,OAAO,IAAX;MACI,UAAU,KAAK,OADnB;;AAGA,YAAU,WAAW,EAArB;;AAEA,MAAI,OAAO,QAAQ,KAAf,KAAyB,QAA7B,EAAuC;AACrC,YAAQ,KAAR,GAAgB,IAAI,KAAJ,CAAU,QAAQ,KAAlB,CAAhB;AACD;;AAED,MAAI,CAAC,QAAQ,KAAT,IAAkB,CAAC,QAAQ,MAA/B,EAAuC;AACrC,WAAO,KAAP;AACD;;;AAGD,MAAI,QAAQ,oBAAZ,EAAkC;AAChC,SAAK,oBAAL,GAA4B,QAAQ,oBAApC;AACD;AACD,MAAI,QAAQ,wBAAZ,EAAsC;AACpC,SAAK,wBAAL,GAAgC,QAAQ,wBAAxC;AACD;;AAED,MAAI,2BAA2B,KAAK,wBAAL,CAA8B,MAA9B,CAAqC,+BAArC,CAA/B;AACA,MAAI,uBAAuB,KAAK,oBAAL,CAA0B,MAA1B,CAAiC,wBAAjC,CAA3B;;;;AAIA,MAAI,eAAe,8BAA8B,QAAQ,OAAtC,EAA+C,oBAA/C,CAAnB;AACA,eAAa,IAAb,GAAoB,mBAAmB,QAAQ,GAA3B,CAApB;;AAEA,2BAAyB,OAAzB,CAAiC,QAAQ,YAAzC,EAAuD,OAAvD;;;AAGA,MAAI,WAAW,YAAY,OAAZ,CAAf;AACA,MAAI,gBAAgB,uBAAuB,OAAvB,EAAgC,YAAhC,CAApB;AACA,UAAQ,KAAR,GAAgB,SAAS,aAAT,CAAhB;;AAEA,SAAO,IAAP;AACD,CAtCD;;AAwCA,OAAO,2BAAP,GAAqC,2BAArC;AACA,OAAO,+BAAP,GAAyC,+BAAzC;AACA,QAAQ,MAAR,GAAiB,MAAjB","file":"tunnel-compiled.js","sourcesContent":["'use strict'\n\nvar url = require('url')\n  , tunnel = require('tunnel-agent')\n\nvar defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nvar defaultProxyHeaderExclusiveList = [\n  'proxy-authorization'\n]\n\nfunction constructProxyHost(uriObject) {\n  var port = uriObject.port\n    , protocol = uriObject.protocol\n    , proxyHost = uriObject.hostname + ':'\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {\n  var whiteList = proxyHeaderWhiteList\n    .reduce(function (set, header) {\n      set[header.toLowerCase()] = true\n      return set\n    }, {})\n\n  return Object.keys(headers)\n    .filter(function (header) {\n      return whiteList[header.toLowerCase()]\n    })\n    .reduce(function (set, header) {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions (request, proxyHeaders) {\n  var proxy = request.proxy\n\n  var tunnelOptions = {\n    proxy : {\n      host      : proxy.hostname,\n      port      : +proxy.port,\n      proxyAuth : proxy.auth,\n      headers   : proxyHeaders\n    },\n    headers            : request.headers,\n    ca                 : request.ca,\n    cert               : request.cert,\n    key                : request.key,\n    passphrase         : request.passphrase,\n    pfx                : request.pfx,\n    ciphers            : request.ciphers,\n    rejectUnauthorized : request.rejectUnauthorized,\n    secureOptions      : request.secureOptions,\n    secureProtocol     : request.secureProtocol\n  }\n\n  return tunnelOptions\n}\n\nfunction constructTunnelFnName(uri, proxy) {\n  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction getTunnelFn(request) {\n  var uri = request.uri\n  var proxy = request.proxy\n  var tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\n\nfunction Tunnel (request) {\n  this.request = request\n  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n  this.proxyHeaderExclusiveList = []\n  if (typeof request.tunnel !== 'undefined') {\n    this.tunnelOverride = request.tunnel\n  }\n}\n\nTunnel.prototype.isEnabled = function () {\n  var self = this\n    , request = self.request\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If self.tunnelOverride is set (the user specified a value), use it.\n  if (typeof self.tunnelOverride !== 'undefined') {\n    return self.tunnelOverride\n  }\n\n  // If the destination is HTTPS, tunnel.\n  if (request.uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nTunnel.prototype.setup = function (options) {\n  var self = this\n    , request = self.request\n\n  options = options || {}\n\n  if (typeof request.proxy === 'string') {\n    request.proxy = url.parse(request.proxy)\n  }\n\n  if (!request.proxy || !request.tunnel) {\n    return false\n  }\n\n  // Setup Proxy Header Exclusive List and White List\n  if (options.proxyHeaderWhiteList) {\n    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n  }\n  if (options.proxyHeaderExclusiveList) {\n    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n  }\n\n  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n  // Setup Proxy Headers and Proxy Headers Host\n  // Only send the Proxy White Listed Header names\n  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(request.uri)\n\n  proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n  // Set Agent from Tunnel Data\n  var tunnelFn = getTunnelFn(request)\n  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n  request.agent = tunnelFn(tunnelOptions)\n\n  return true\n}\n\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\nexports.Tunnel = Tunnel\n"]}