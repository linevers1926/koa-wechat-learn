{"version":3,"sources":["_baseIsEqual.js"],"names":[],"mappings":"AAAA,IAAI,kBAAkB,QAAQ,oBAAR,CAAtB;IACI,WAAW,QAAQ,YAAR,CADf;IAEI,eAAe,QAAQ,gBAAR,CAFnB;;;;;;;;;;;;;;;;AAkBA,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,OAAnC,EAA4C,UAA5C,EAAwD,KAAxD,EAA+D;AAC7D,MAAI,UAAU,KAAd,EAAqB;AACnB,WAAO,IAAP;AACD;AACD,MAAI,SAAS,IAAT,IAAiB,SAAS,IAA1B,IAAmC,CAAC,SAAS,KAAT,CAAD,IAAoB,CAAC,aAAa,KAAb,CAA5D,EAAkF;AAChF,WAAO,UAAU,KAAV,IAAmB,UAAU,KAApC;AACD;AACD,SAAO,gBAAgB,KAAhB,EAAuB,KAAvB,EAA8B,OAA9B,EAAuC,UAAvC,EAAmD,WAAnD,EAAgE,KAAhE,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_baseIsEqual-compiled.js","sourcesContent":["var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObject = require('./isObject'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n"]}