{"version":3,"sources":["_baseXor.js"],"names":[],"mappings":"AAAA,IAAI,iBAAiB,QAAQ,mBAAR,CAArB;IACI,cAAc,QAAQ,gBAAR,CADlB;IAEI,WAAW,QAAQ,aAAR,CAFf;;;;;;;;;;;;AAcA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,QAAzB,EAAmC,UAAnC,EAA+C;AAC7C,MAAI,SAAS,OAAO,MAApB;AACA,MAAI,SAAS,CAAb,EAAgB;AACd,WAAO,SAAS,SAAS,OAAO,CAAP,CAAT,CAAT,GAA+B,EAAtC;AACD;AACD,MAAI,QAAQ,CAAC,CAAb;MACI,SAAS,MAAM,MAAN,CADb;;AAGA,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,QAAQ,OAAO,KAAP,CAAZ;QACI,WAAW,CAAC,CADhB;;AAGA,WAAO,EAAE,QAAF,GAAa,MAApB,EAA4B;AAC1B,UAAI,YAAY,KAAhB,EAAuB;AACrB,eAAO,KAAP,IAAgB,eAAe,OAAO,KAAP,KAAiB,KAAhC,EAAuC,OAAO,QAAP,CAAvC,EAAyD,QAAzD,EAAmE,UAAnE,CAAhB;AACD;AACF;AACF;AACD,SAAO,SAAS,YAAY,MAAZ,EAAoB,CAApB,CAAT,EAAiC,QAAjC,EAA2C,UAA3C,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"_baseXor-compiled.js","sourcesContent":["var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n  var length = arrays.length;\n  if (length < 2) {\n    return length ? baseUniq(arrays[0]) : [];\n  }\n  var index = -1,\n      result = Array(length);\n\n  while (++index < length) {\n    var array = arrays[index],\n        othIndex = -1;\n\n    while (++othIndex < length) {\n      if (othIndex != index) {\n        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n      }\n    }\n  }\n  return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n}\n\nmodule.exports = baseXor;\n"]}