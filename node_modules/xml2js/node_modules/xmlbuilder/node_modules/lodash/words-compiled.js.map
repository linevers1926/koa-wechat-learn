{"version":3,"sources":["words.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;IACI,iBAAiB,QAAQ,mBAAR,CADrB;IAEI,WAAW,QAAQ,YAAR,CAFf;IAGI,eAAe,QAAQ,iBAAR,CAHnB;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAS,KAAT,CAAe,MAAf,EAAuB,OAAvB,EAAgC,KAAhC,EAAuC;AACrC,WAAS,SAAS,MAAT,CAAT;AACA,YAAU,QAAQ,SAAR,GAAoB,OAA9B;;AAEA,MAAI,YAAY,SAAhB,EAA2B;AACzB,WAAO,eAAe,MAAf,IAAyB,aAAa,MAAb,CAAzB,GAAgD,WAAW,MAAX,CAAvD;AACD;AACD,SAAO,OAAO,KAAP,CAAa,OAAb,KAAyB,EAAhC;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"words-compiled.js","sourcesContent":["var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n"]}