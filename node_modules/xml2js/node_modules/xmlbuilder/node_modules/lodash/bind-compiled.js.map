{"version":3,"sources":["bind.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;IACI,aAAa,QAAQ,eAAR,CADjB;IAEI,YAAY,QAAQ,cAAR,CAFhB;IAGI,iBAAiB,QAAQ,mBAAR,CAHrB;;;AAMA,IAAI,iBAAiB,CAArB;IACI,oBAAoB,EADxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAI,OAAO,SAAS,UAAS,IAAT,EAAe,OAAf,EAAwB,QAAxB,EAAkC;AACpD,MAAI,UAAU,cAAd;AACA,MAAI,SAAS,MAAb,EAAqB;AACnB,QAAI,UAAU,eAAe,QAAf,EAAyB,UAAU,IAAV,CAAzB,CAAd;AACA,eAAW,iBAAX;AACD;AACD,SAAO,WAAW,IAAX,EAAiB,OAAjB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,OAA7C,CAAP;AACD,CAPU,CAAX;;;AAUA,KAAK,WAAL,GAAmB,EAAnB;;AAEA,OAAO,OAAP,GAAiB,IAAjB","file":"bind-compiled.js","sourcesContent":["var baseRest = require('./_baseRest'),\n    createWrap = require('./_createWrap'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of `thisArg`\n * and `partials` prepended to the arguments it receives.\n *\n * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n * may be used as a placeholder for partially applied arguments.\n *\n * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n * property of bound functions.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new bound function.\n * @example\n *\n * function greet(greeting, punctuation) {\n *   return greeting + ' ' + this.user + punctuation;\n * }\n *\n * var object = { 'user': 'fred' };\n *\n * var bound = _.bind(greet, object, 'hi');\n * bound('!');\n * // => 'hi fred!'\n *\n * // Bound with placeholders.\n * var bound = _.bind(greet, object, _, '!');\n * bound('hi');\n * // => 'hi fred!'\n */\nvar bind = baseRest(function(func, thisArg, partials) {\n  var bitmask = WRAP_BIND_FLAG;\n  if (partials.length) {\n    var holders = replaceHolders(partials, getHolder(bind));\n    bitmask |= WRAP_PARTIAL_FLAG;\n  }\n  return createWrap(func, bitmask, thisArg, partials, holders);\n});\n\n// Assign default placeholders.\nbind.placeholder = {};\n\nmodule.exports = bind;\n"]}