{"version":3,"sources":["cloneWith.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;;AAGA,IAAI,qBAAqB,CAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAS,SAAT,CAAmB,KAAnB,EAA0B,UAA1B,EAAsC;AACpC,eAAa,OAAO,UAAP,IAAqB,UAArB,GAAkC,UAAlC,GAA+C,SAA5D;AACA,SAAO,UAAU,KAAV,EAAiB,kBAAjB,EAAqC,UAArC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"cloneWith-compiled.js","sourcesContent":["var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it accepts `customizer` which\n * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n * cloning is handled by the method instead. The `customizer` is invoked with\n * up to four arguments; (value [, index|key, object, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeepWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(false);\n *   }\n * }\n *\n * var el = _.cloneWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 0\n */\nfunction cloneWith(value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n}\n\nmodule.exports = cloneWith;\n"]}