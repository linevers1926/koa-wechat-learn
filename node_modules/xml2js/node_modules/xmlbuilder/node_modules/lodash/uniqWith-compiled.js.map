{"version":3,"sources":["uniqWith.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,UAAzB,EAAqC;AACnC,eAAa,OAAO,UAAP,IAAqB,UAArB,GAAkC,UAAlC,GAA+C,SAA5D;AACA,SAAQ,SAAS,MAAM,MAAhB,GAA0B,SAAS,KAAT,EAAgB,SAAhB,EAA2B,UAA3B,CAA1B,GAAmE,EAA1E;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"uniqWith-compiled.js","sourcesContent":["var baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The order of result values is\n * determined by the order they occur in the array.The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n}\n\nmodule.exports = uniqWith;\n"]}