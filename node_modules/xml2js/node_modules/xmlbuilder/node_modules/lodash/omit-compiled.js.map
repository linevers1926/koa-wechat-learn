{"version":3,"sources":["omit.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;IACI,YAAY,QAAQ,cAAR,CADhB;IAEI,YAAY,QAAQ,cAAR,CAFhB;IAGI,WAAW,QAAQ,aAAR,CAHf;IAII,aAAa,QAAQ,eAAR,CAJjB;IAKI,WAAW,QAAQ,aAAR,CALf;IAMI,eAAe,QAAQ,iBAAR,CANnB;;;AASA,IAAI,kBAAkB,CAAtB;IACI,kBAAkB,CADtB;IAEI,qBAAqB,CAFzB;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAI,OAAO,SAAS,UAAS,MAAT,EAAiB,KAAjB,EAAwB;AAC1C,MAAI,SAAS,EAAb;AACA,MAAI,UAAU,IAAd,EAAoB;AAClB,WAAO,MAAP;AACD;AACD,MAAI,SAAS,KAAb;AACA,UAAQ,SAAS,KAAT,EAAgB,UAAS,IAAT,EAAe;AACrC,WAAO,SAAS,IAAT,EAAe,MAAf,CAAP;AACA,eAAW,SAAS,KAAK,MAAL,GAAc,CAAlC;AACA,WAAO,IAAP;AACD,GAJO,CAAR;AAKA,aAAW,MAAX,EAAmB,aAAa,MAAb,CAAnB,EAAyC,MAAzC;AACA,MAAI,MAAJ,EAAY;AACV,aAAS,UAAU,MAAV,EAAkB,kBAAkB,eAAlB,GAAoC,kBAAtD,CAAT;AACD;AACD,MAAI,SAAS,MAAM,MAAnB;AACA,SAAO,QAAP,EAAiB;AACf,cAAU,MAAV,EAAkB,MAAM,MAAN,CAAlB;AACD;AACD,SAAO,MAAP;AACD,CApBU,CAAX;;AAsBA,OAAO,OAAP,GAAiB,IAAjB","file":"omit-compiled.js","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n"]}