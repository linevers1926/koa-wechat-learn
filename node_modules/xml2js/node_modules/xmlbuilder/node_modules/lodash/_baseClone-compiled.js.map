{"version":3,"sources":["_baseClone.js"],"names":[],"mappings":"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","file":"_baseClone-compiled.js","sourcesContent":["var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isObject = require('./isObject'),\n    keys = require('./keys');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n"]}