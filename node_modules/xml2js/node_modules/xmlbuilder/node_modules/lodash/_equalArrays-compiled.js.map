{"version":3,"sources":["_equalArrays.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;IACI,YAAY,QAAQ,cAAR,CADhB;IAEI,WAAW,QAAQ,aAAR,CAFf;;;AAKA,IAAI,uBAAuB,CAA3B;IACI,yBAAyB,CAD7B;;;;;;;;;;;;;;;AAgBA,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,OAAnC,EAA4C,UAA5C,EAAwD,SAAxD,EAAmE,KAAnE,EAA0E;AACxE,MAAI,YAAY,UAAU,oBAA1B;MACI,YAAY,MAAM,MADtB;MAEI,YAAY,MAAM,MAFtB;;AAIA,MAAI,aAAa,SAAb,IAA0B,EAAE,aAAa,YAAY,SAA3B,CAA9B,EAAqE;AACnE,WAAO,KAAP;AACD;;AAED,MAAI,UAAU,MAAM,GAAN,CAAU,KAAV,CAAd;AACA,MAAI,WAAW,MAAM,GAAN,CAAU,KAAV,CAAf,EAAiC;AAC/B,WAAO,WAAW,KAAlB;AACD;AACD,MAAI,QAAQ,CAAC,CAAb;MACI,SAAS,IADb;MAEI,OAAQ,UAAU,sBAAX,GAAqC,IAAI,QAAJ,EAArC,GAAoD,SAF/D;;AAIA,QAAM,GAAN,CAAU,KAAV,EAAiB,KAAjB;AACA,QAAM,GAAN,CAAU,KAAV,EAAiB,KAAjB;;;AAGA,SAAO,EAAE,KAAF,GAAU,SAAjB,EAA4B;AAC1B,QAAI,WAAW,MAAM,KAAN,CAAf;QACI,WAAW,MAAM,KAAN,CADf;;AAGA,QAAI,UAAJ,EAAgB;AACd,UAAI,WAAW,YACX,WAAW,QAAX,EAAqB,QAArB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,KAApD,CADW,GAEX,WAAW,QAAX,EAAqB,QAArB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,KAApD,CAFJ;AAGD;AACD,QAAI,aAAa,SAAjB,EAA4B;AAC1B,UAAI,QAAJ,EAAc;AACZ;AACD;AACD,eAAS,KAAT;AACA;AACD;;AAED,QAAI,IAAJ,EAAU;AACR,UAAI,CAAC,UAAU,KAAV,EAAiB,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AAC7C,YAAI,CAAC,SAAS,IAAT,EAAe,QAAf,CAAD,KACC,aAAa,QAAb,IAAyB,UAAU,QAAV,EAAoB,QAApB,EAA8B,OAA9B,EAAuC,UAAvC,EAAmD,KAAnD,CAD1B,CAAJ,EAC0F;AACxF,iBAAO,KAAK,IAAL,CAAU,QAAV,CAAP;AACD;AACF,OALA,CAAL,EAKQ;AACN,iBAAS,KAAT;AACA;AACD;AACF,KAVD,MAUO,IAAI,EACL,aAAa,QAAb,IACE,UAAU,QAAV,EAAoB,QAApB,EAA8B,OAA9B,EAAuC,UAAvC,EAAmD,KAAnD,CAFG,CAAJ,EAGA;AACL,eAAS,KAAT;AACA;AACD;AACF;AACD,QAAM,QAAN,EAAgB,KAAhB;AACA,QAAM,QAAN,EAAgB,KAAhB;AACA,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_equalArrays-compiled.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n"]}