{"version":3,"sources":["_updateWrapDetails.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,cAAR,CAAhB;IACI,gBAAgB,QAAQ,kBAAR,CADpB;;;AAIA,IAAI,iBAAiB,CAArB;IACI,qBAAqB,CADzB;IAEI,kBAAkB,CAFtB;IAGI,wBAAwB,EAH5B;IAII,oBAAoB,EAJxB;IAKI,0BAA0B,EAL9B;IAMI,gBAAgB,GANpB;IAOI,kBAAkB,GAPtB;IAQI,iBAAiB,GARrB;;;AAWA,IAAI,YAAY,CACd,CAAC,KAAD,EAAQ,aAAR,CADc,EAEd,CAAC,MAAD,EAAS,cAAT,CAFc,EAGd,CAAC,SAAD,EAAY,kBAAZ,CAHc,EAId,CAAC,OAAD,EAAU,eAAV,CAJc,EAKd,CAAC,YAAD,EAAe,qBAAf,CALc,EAMd,CAAC,MAAD,EAAS,cAAT,CANc,EAOd,CAAC,SAAD,EAAY,iBAAZ,CAPc,EAQd,CAAC,cAAD,EAAiB,uBAAjB,CARc,EASd,CAAC,OAAD,EAAU,eAAV,CATc,CAAhB;;;;;;;;;;AAoBA,SAAS,iBAAT,CAA2B,OAA3B,EAAoC,OAApC,EAA6C;AAC3C,YAAU,SAAV,EAAqB,UAAS,IAAT,EAAe;AAClC,QAAI,QAAQ,OAAO,KAAK,CAAL,CAAnB;AACA,QAAK,UAAU,KAAK,CAAL,CAAX,IAAuB,CAAC,cAAc,OAAd,EAAuB,KAAvB,CAA5B,EAA2D;AACzD,cAAQ,IAAR,CAAa,KAAb;AACD;AACF,GALD;AAMA,SAAO,QAAQ,IAAR,EAAP;AACD;;AAED,OAAO,OAAP,GAAiB,iBAAjB","file":"_updateWrapDetails-compiled.js","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    arrayIncludes = require('./_arrayIncludes');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nmodule.exports = updateWrapDetails;\n"]}