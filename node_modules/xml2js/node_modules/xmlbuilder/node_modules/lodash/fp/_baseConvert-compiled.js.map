{"version":3,"sources":["_baseConvert.js"],"names":[],"mappings":"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","file":"_baseConvert-compiled.js","sourcesContent":["var mapping = require('./_mapping'),\n    fallbackHolder = require('./placeholder');\n\n/** Built-in value reference. */\nvar push = Array.prototype.push;\n\n/**\n * Creates a function, with an arity of `n`, that invokes `func` with the\n * arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} n The arity of the new function.\n * @returns {Function} Returns the new function.\n */\nfunction baseArity(func, n) {\n  return n == 2\n    ? function(a, b) { return func.apply(undefined, arguments); }\n    : function(a) { return func.apply(undefined, arguments); };\n}\n\n/**\n * Creates a function that invokes `func`, with up to `n` arguments, ignoring\n * any additional arguments.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @param {number} n The arity cap.\n * @returns {Function} Returns the new function.\n */\nfunction baseAry(func, n) {\n  return n == 2\n    ? function(a, b) { return func(a, b); }\n    : function(a) { return func(a); };\n}\n\n/**\n * Creates a clone of `array`.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the cloned array.\n */\nfunction cloneArray(array) {\n  var length = array ? array.length : 0,\n      result = Array(length);\n\n  while (length--) {\n    result[length] = array[length];\n  }\n  return result;\n}\n\n/**\n * Creates a function that clones a given object using the assignment `func`.\n *\n * @private\n * @param {Function} func The assignment function.\n * @returns {Function} Returns the new cloner function.\n */\nfunction createCloner(func) {\n  return function(object) {\n    return func({}, object);\n  };\n}\n\n/**\n * This function is like `_.spread` except that it includes arguments after those spread.\n *\n * @private\n * @param {Function} func The function to spread arguments over.\n * @param {number} start The start position of the spread.\n * @returns {Function} Returns the new function.\n */\nfunction spread(func, start) {\n  return function() {\n    var length = arguments.length,\n        args = Array(length);\n\n    while (length--) {\n      args[length] = arguments[length];\n    }\n    var array = args[start],\n        lastIndex = args.length - 1,\n        otherArgs = args.slice(0, start);\n\n    if (array) {\n      push.apply(otherArgs, array);\n    }\n    if (start != lastIndex) {\n      push.apply(otherArgs, args.slice(start + 1));\n    }\n    return func.apply(this, otherArgs);\n  };\n}\n\n/**\n * Creates a function that wraps `func` and uses `cloner` to clone the first\n * argument it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} cloner The function to clone arguments.\n * @returns {Function} Returns the new immutable function.\n */\nfunction wrapImmutable(func, cloner) {\n  return function() {\n    var length = arguments.length;\n    if (!length) {\n      return;\n    }\n    var args = Array(length);\n    while (length--) {\n      args[length] = arguments[length];\n    }\n    var result = args[0] = cloner.apply(undefined, args);\n    func.apply(undefined, args);\n    return result;\n  };\n}\n\n/**\n * The base implementation of `convert` which accepts a `util` object of methods\n * required to perform conversions.\n *\n * @param {Object} util The util object.\n * @param {string} name The name of the function to convert.\n * @param {Function} func The function to convert.\n * @param {Object} [options] The options object.\n * @param {boolean} [options.cap=true] Specify capping iteratee arguments.\n * @param {boolean} [options.curry=true] Specify currying.\n * @param {boolean} [options.fixed=true] Specify fixed arity.\n * @param {boolean} [options.immutable=true] Specify immutable operations.\n * @param {boolean} [options.rearg=true] Specify rearranging arguments.\n * @returns {Function|Object} Returns the converted function or object.\n */\nfunction baseConvert(util, name, func, options) {\n  var setPlaceholder,\n      isLib = typeof name == 'function',\n      isObj = name === Object(name);\n\n  if (isObj) {\n    options = func;\n    func = name;\n    name = undefined;\n  }\n  if (func == null) {\n    throw new TypeError;\n  }\n  options || (options = {});\n\n  var config = {\n    'cap': 'cap' in options ? options.cap : true,\n    'curry': 'curry' in options ? options.curry : true,\n    'fixed': 'fixed' in options ? options.fixed : true,\n    'immutable': 'immutable' in options ? options.immutable : true,\n    'rearg': 'rearg' in options ? options.rearg : true\n  };\n\n  var forceCurry = ('curry' in options) && options.curry,\n      forceFixed = ('fixed' in options) && options.fixed,\n      forceRearg = ('rearg' in options) && options.rearg,\n      placeholder = isLib ? func : fallbackHolder,\n      pristine = isLib ? func.runInContext() : undefined;\n\n  var helpers = isLib ? func : {\n    'ary': util.ary,\n    'assign': util.assign,\n    'clone': util.clone,\n    'curry': util.curry,\n    'forEach': util.forEach,\n    'isArray': util.isArray,\n    'isFunction': util.isFunction,\n    'iteratee': util.iteratee,\n    'keys': util.keys,\n    'rearg': util.rearg,\n    'toInteger': util.toInteger,\n    'toPath': util.toPath\n  };\n\n  var ary = helpers.ary,\n      assign = helpers.assign,\n      clone = helpers.clone,\n      curry = helpers.curry,\n      each = helpers.forEach,\n      isArray = helpers.isArray,\n      isFunction = helpers.isFunction,\n      keys = helpers.keys,\n      rearg = helpers.rearg,\n      toInteger = helpers.toInteger,\n      toPath = helpers.toPath;\n\n  var aryMethodKeys = keys(mapping.aryMethod);\n\n  var wrappers = {\n    'castArray': function(castArray) {\n      return function() {\n        var value = arguments[0];\n        return isArray(value)\n          ? castArray(cloneArray(value))\n          : castArray.apply(undefined, arguments);\n      };\n    },\n    'iteratee': function(iteratee) {\n      return function() {\n        var func = arguments[0],\n            arity = arguments[1],\n            result = iteratee(func, arity),\n            length = result.length;\n\n        if (config.cap && typeof arity == 'number') {\n          arity = arity > 2 ? (arity - 2) : 1;\n          return (length && length <= arity) ? result : baseAry(result, arity);\n        }\n        return result;\n      };\n    },\n    'mixin': function(mixin) {\n      return function(source) {\n        var func = this;\n        if (!isFunction(func)) {\n          return mixin(func, Object(source));\n        }\n        var pairs = [];\n        each(keys(source), function(key) {\n          if (isFunction(source[key])) {\n            pairs.push([key, func.prototype[key]]);\n          }\n        });\n\n        mixin(func, Object(source));\n\n        each(pairs, function(pair) {\n          var value = pair[1];\n          if (isFunction(value)) {\n            func.prototype[pair[0]] = value;\n          } else {\n            delete func.prototype[pair[0]];\n          }\n        });\n        return func;\n      };\n    },\n    'nthArg': function(nthArg) {\n      return function(n) {\n        var arity = n < 0 ? 1 : (toInteger(n) + 1);\n        return curry(nthArg(n), arity);\n      };\n    },\n    'rearg': function(rearg) {\n      return function(func, indexes) {\n        var arity = indexes ? indexes.length : 0;\n        return curry(rearg(func, indexes), arity);\n      };\n    },\n    'runInContext': function(runInContext) {\n      return function(context) {\n        return baseConvert(util, runInContext(context), options);\n      };\n    }\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Casts `func` to a function with an arity capped iteratee if needed.\n   *\n   * @private\n   * @param {string} name The name of the function to inspect.\n   * @param {Function} func The function to inspect.\n   * @returns {Function} Returns the cast function.\n   */\n  function castCap(name, func) {\n    if (config.cap) {\n      var indexes = mapping.iterateeRearg[name];\n      if (indexes) {\n        return iterateeRearg(func, indexes);\n      }\n      var n = !isLib && mapping.iterateeAry[name];\n      if (n) {\n        return iterateeAry(func, n);\n      }\n    }\n    return func;\n  }\n\n  /**\n   * Casts `func` to a curried function if needed.\n   *\n   * @private\n   * @param {string} name The name of the function to inspect.\n   * @param {Function} func The function to inspect.\n   * @param {number} n The arity of `func`.\n   * @returns {Function} Returns the cast function.\n   */\n  function castCurry(name, func, n) {\n    return (forceCurry || (config.curry && n > 1))\n      ? curry(func, n)\n      : func;\n  }\n\n  /**\n   * Casts `func` to a fixed arity function if needed.\n   *\n   * @private\n   * @param {string} name The name of the function to inspect.\n   * @param {Function} func The function to inspect.\n   * @param {number} n The arity cap.\n   * @returns {Function} Returns the cast function.\n   */\n  function castFixed(name, func, n) {\n    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {\n      var data = mapping.methodSpread[name],\n          start = data && data.start;\n\n      return start  === undefined ? ary(func, n) : spread(func, start);\n    }\n    return func;\n  }\n\n  /**\n   * Casts `func` to an rearged function if needed.\n   *\n   * @private\n   * @param {string} name The name of the function to inspect.\n   * @param {Function} func The function to inspect.\n   * @param {number} n The arity of `func`.\n   * @returns {Function} Returns the cast function.\n   */\n  function castRearg(name, func, n) {\n    return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))\n      ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])\n      : func;\n  }\n\n  /**\n   * Creates a clone of `object` by `path`.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @param {Array|string} path The path to clone by.\n   * @returns {Object} Returns the cloned object.\n   */\n  function cloneByPath(object, path) {\n    path = toPath(path);\n\n    var index = -1,\n        length = path.length,\n        lastIndex = length - 1,\n        result = clone(Object(object)),\n        nested = result;\n\n    while (nested != null && ++index < length) {\n      var key = path[index],\n          value = nested[key];\n\n      if (value != null) {\n        nested[path[index]] = clone(index == lastIndex ? value : Object(value));\n      }\n      nested = nested[key];\n    }\n    return result;\n  }\n\n  /**\n   * Converts `lodash` to an immutable auto-curried iteratee-first data-last\n   * version with conversion `options` applied.\n   *\n   * @param {Object} [options] The options object. See `baseConvert` for more details.\n   * @returns {Function} Returns the converted `lodash`.\n   */\n  function convertLib(options) {\n    return _.runInContext.convert(options)(undefined);\n  }\n\n  /**\n   * Create a converter function for `func` of `name`.\n   *\n   * @param {string} name The name of the function to convert.\n   * @param {Function} func The function to convert.\n   * @returns {Function} Returns the new converter function.\n   */\n  function createConverter(name, func) {\n    var realName = mapping.aliasToReal[name] || name,\n        methodName = mapping.remap[realName] || realName,\n        oldOptions = options;\n\n    return function(options) {\n      var newUtil = isLib ? pristine : helpers,\n          newFunc = isLib ? pristine[methodName] : func,\n          newOptions = assign(assign({}, oldOptions), options);\n\n      return baseConvert(newUtil, realName, newFunc, newOptions);\n    };\n  }\n\n  /**\n   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`\n   * arguments, ignoring any additional arguments.\n   *\n   * @private\n   * @param {Function} func The function to cap iteratee arguments for.\n   * @param {number} n The arity cap.\n   * @returns {Function} Returns the new function.\n   */\n  function iterateeAry(func, n) {\n    return overArg(func, function(func) {\n      return typeof func == 'function' ? baseAry(func, n) : func;\n    });\n  }\n\n  /**\n   * Creates a function that wraps `func` to invoke its iteratee with arguments\n   * arranged according to the specified `indexes` where the argument value at\n   * the first index is provided as the first argument, the argument value at\n   * the second index is provided as the second argument, and so on.\n   *\n   * @private\n   * @param {Function} func The function to rearrange iteratee arguments for.\n   * @param {number[]} indexes The arranged argument indexes.\n   * @returns {Function} Returns the new function.\n   */\n  function iterateeRearg(func, indexes) {\n    return overArg(func, function(func) {\n      var n = indexes.length;\n      return baseArity(rearg(baseAry(func, n), indexes), n);\n    });\n  }\n\n  /**\n   * Creates a function that invokes `func` with its first argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function() {\n      var length = arguments.length;\n      if (!length) {\n        return func();\n      }\n      var args = Array(length);\n      while (length--) {\n        args[length] = arguments[length];\n      }\n      var index = config.rearg ? 0 : (length - 1);\n      args[index] = transform(args[index]);\n      return func.apply(undefined, args);\n    };\n  }\n\n  /**\n   * Creates a function that wraps `func` and applys the conversions\n   * rules by `name`.\n   *\n   * @private\n   * @param {string} name The name of the function to wrap.\n   * @param {Function} func The function to wrap.\n   * @returns {Function} Returns the converted function.\n   */\n  function wrap(name, func) {\n    var result,\n        realName = mapping.aliasToReal[name] || name,\n        wrapped = func,\n        wrapper = wrappers[realName];\n\n    if (wrapper) {\n      wrapped = wrapper(func);\n    }\n    else if (config.immutable) {\n      if (mapping.mutate.array[realName]) {\n        wrapped = wrapImmutable(func, cloneArray);\n      }\n      else if (mapping.mutate.object[realName]) {\n        wrapped = wrapImmutable(func, createCloner(func));\n      }\n      else if (mapping.mutate.set[realName]) {\n        wrapped = wrapImmutable(func, cloneByPath);\n      }\n    }\n    each(aryMethodKeys, function(aryKey) {\n      each(mapping.aryMethod[aryKey], function(otherName) {\n        if (realName == otherName) {\n          var spreadData = mapping.methodSpread[realName],\n              afterRearg = spreadData && spreadData.afterRearg;\n\n          result = afterRearg\n            ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)\n            : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);\n\n          result = castCap(realName, result);\n          result = castCurry(realName, result, aryKey);\n          return false;\n        }\n      });\n      return !result;\n    });\n\n    result || (result = wrapped);\n    if (result == func) {\n      result = forceCurry ? curry(result, 1) : function() {\n        return func.apply(this, arguments);\n      };\n    }\n    result.convert = createConverter(realName, func);\n    if (mapping.placeholder[realName]) {\n      setPlaceholder = true;\n      result.placeholder = func.placeholder = placeholder;\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  if (!isObj) {\n    return wrap(name, func);\n  }\n  var _ = func;\n\n  // Convert methods by ary cap.\n  var pairs = [];\n  each(aryMethodKeys, function(aryKey) {\n    each(mapping.aryMethod[aryKey], function(key) {\n      var func = _[mapping.remap[key] || key];\n      if (func) {\n        pairs.push([key, wrap(key, func)]);\n      }\n    });\n  });\n\n  // Convert remaining methods.\n  each(keys(_), function(key) {\n    var func = _[key];\n    if (typeof func == 'function') {\n      var length = pairs.length;\n      while (length--) {\n        if (pairs[length][0] == key) {\n          return;\n        }\n      }\n      func.convert = createConverter(key, func);\n      pairs.push([key, func]);\n    }\n  });\n\n  // Assign to `_` leaving `_.prototype` unchanged to allow chaining.\n  each(pairs, function(pair) {\n    _[pair[0]] = pair[1];\n  });\n\n  _.convert = convertLib;\n  if (setPlaceholder) {\n    _.placeholder = placeholder;\n  }\n  // Assign aliases.\n  each(keys(_), function(key) {\n    each(mapping.realToAlias[key] || [], function(alias) {\n      _[alias] = _[key];\n    });\n  });\n\n  return _;\n}\n\nmodule.exports = baseConvert;\n"]}