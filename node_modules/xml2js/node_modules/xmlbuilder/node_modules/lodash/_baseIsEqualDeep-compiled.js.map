{"version":3,"sources":["_baseIsEqualDeep.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;IACI,cAAc,QAAQ,gBAAR,CADlB;IAEI,aAAa,QAAQ,eAAR,CAFjB;IAGI,eAAe,QAAQ,iBAAR,CAHnB;IAII,SAAS,QAAQ,WAAR,CAJb;IAKI,UAAU,QAAQ,WAAR,CALd;IAMI,WAAW,QAAQ,YAAR,CANf;IAOI,eAAe,QAAQ,gBAAR,CAPnB;;;AAUA,IAAI,uBAAuB,CAA3B;;;AAGA,IAAI,UAAU,oBAAd;IACI,WAAW,gBADf;IAEI,YAAY,iBAFhB;;;AAKA,IAAI,cAAc,OAAO,SAAzB;;;AAGA,IAAI,iBAAiB,YAAY,cAAjC;;;;;;;;;;;;;;;;AAgBA,SAAS,eAAT,CAAyB,MAAzB,EAAiC,KAAjC,EAAwC,OAAxC,EAAiD,UAAjD,EAA6D,SAA7D,EAAwE,KAAxE,EAA+E;AAC7E,MAAI,WAAW,QAAQ,MAAR,CAAf;MACI,WAAW,QAAQ,KAAR,CADf;MAEI,SAAS,QAFb;MAGI,SAAS,QAHb;;AAKA,MAAI,CAAC,QAAL,EAAe;AACb,aAAS,OAAO,MAAP,CAAT;AACA,aAAS,UAAU,OAAV,GAAoB,SAApB,GAAgC,MAAzC;AACD;AACD,MAAI,CAAC,QAAL,EAAe;AACb,aAAS,OAAO,KAAP,CAAT;AACA,aAAS,UAAU,OAAV,GAAoB,SAApB,GAAgC,MAAzC;AACD;AACD,MAAI,WAAW,UAAU,SAAzB;MACI,WAAW,UAAU,SADzB;MAEI,YAAY,UAAU,MAF1B;;AAIA,MAAI,aAAa,SAAS,MAAT,CAAjB,EAAmC;AACjC,QAAI,CAAC,SAAS,KAAT,CAAL,EAAsB;AACpB,aAAO,KAAP;AACD;AACD,eAAW,IAAX;AACA,eAAW,KAAX;AACD;AACD,MAAI,aAAa,CAAC,QAAlB,EAA4B;AAC1B,cAAU,QAAQ,IAAI,KAAJ,EAAlB;AACA,WAAQ,YAAY,aAAa,MAAb,CAAb,GACH,YAAY,MAAZ,EAAoB,KAApB,EAA2B,OAA3B,EAAoC,UAApC,EAAgD,SAAhD,EAA2D,KAA3D,CADG,GAEH,WAAW,MAAX,EAAmB,KAAnB,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C,UAA3C,EAAuD,SAAvD,EAAkE,KAAlE,CAFJ;AAGD;AACD,MAAI,EAAE,UAAU,oBAAZ,CAAJ,EAAuC;AACrC,QAAI,eAAe,YAAY,eAAe,IAAf,CAAoB,MAApB,EAA4B,aAA5B,CAA/B;QACI,eAAe,YAAY,eAAe,IAAf,CAAoB,KAApB,EAA2B,aAA3B,CAD/B;;AAGA,QAAI,gBAAgB,YAApB,EAAkC;AAChC,UAAI,eAAe,eAAe,OAAO,KAAP,EAAf,GAAgC,MAAnD;UACI,eAAe,eAAe,MAAM,KAAN,EAAf,GAA+B,KADlD;;AAGA,gBAAU,QAAQ,IAAI,KAAJ,EAAlB;AACA,aAAO,UAAU,YAAV,EAAwB,YAAxB,EAAsC,OAAtC,EAA+C,UAA/C,EAA2D,KAA3D,CAAP;AACD;AACF;AACD,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,KAAP;AACD;AACD,YAAU,QAAQ,IAAI,KAAJ,EAAlB;AACA,SAAO,aAAa,MAAb,EAAqB,KAArB,EAA4B,OAA5B,EAAqC,UAArC,EAAiD,SAAjD,EAA4D,KAA5D,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,eAAjB","file":"_baseIsEqualDeep-compiled.js","sourcesContent":["var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n"]}