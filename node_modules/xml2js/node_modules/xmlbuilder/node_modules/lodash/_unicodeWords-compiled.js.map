{"version":3,"sources":["_unicodeWords.js"],"names":[],"mappings":";AACA,IAAI,gBAAgB,iBAApB;IACI,oBAAoB,iBADxB;IAEI,wBAAwB,iBAF5B;IAGI,sBAAsB,iBAH1B;IAII,eAAe,oBAAoB,qBAApB,GAA4C,mBAJ/D;IAKI,iBAAiB,iBALrB;IAMI,eAAe,2BANnB;IAOI,gBAAgB,sBAPpB;IAQI,iBAAiB,8CARrB;IASI,qBAAqB,iBATzB;IAUI,eAAe,8JAVnB;IAWI,eAAe,2BAXnB;IAYI,aAAa,gBAZjB;IAaI,eAAe,gBAAgB,cAAhB,GAAiC,kBAAjC,GAAsD,YAbzE;;;AAgBA,IAAI,SAAS,WAAb;IACI,UAAU,MAAM,YAAN,GAAqB,GADnC;IAEI,UAAU,MAAM,YAAN,GAAqB,GAFnC;IAGI,WAAW,MAHf;IAII,YAAY,MAAM,cAAN,GAAuB,GAJvC;IAKI,UAAU,MAAM,YAAN,GAAqB,GALnC;IAMI,SAAS,OAAO,aAAP,GAAuB,YAAvB,GAAsC,QAAtC,GAAiD,cAAjD,GAAkE,YAAlE,GAAiF,YAAjF,GAAgG,GAN7G;IAOI,SAAS,0BAPb;IAQI,aAAa,QAAQ,OAAR,GAAkB,GAAlB,GAAwB,MAAxB,GAAiC,GARlD;IASI,cAAc,OAAO,aAAP,GAAuB,GATzC;IAUI,aAAa,iCAVjB;IAWI,aAAa,oCAXjB;IAYI,UAAU,MAAM,YAAN,GAAqB,GAZnC;IAaI,QAAQ,SAbZ;;;AAgBA,IAAI,cAAc,QAAQ,OAAR,GAAkB,GAAlB,GAAwB,MAAxB,GAAiC,GAAnD;IACI,cAAc,QAAQ,OAAR,GAAkB,GAAlB,GAAwB,MAAxB,GAAiC,GADnD;IAEI,kBAAkB,QAAQ,MAAR,GAAiB,wBAFvC;IAGI,kBAAkB,QAAQ,MAAR,GAAiB,wBAHvC;IAII,WAAW,aAAa,GAJ5B;IAKI,WAAW,MAAM,UAAN,GAAmB,IALlC;IAMI,YAAY,QAAQ,KAAR,GAAgB,KAAhB,GAAwB,CAAC,WAAD,EAAc,UAAd,EAA0B,UAA1B,EAAsC,IAAtC,CAA2C,GAA3C,CAAxB,GAA0E,GAA1E,GAAgF,QAAhF,GAA2F,QAA3F,GAAsG,IANtH;IAOI,aAAa,2CAPjB;IAQI,aAAa,2CARjB;IASI,QAAQ,WAAW,QAAX,GAAsB,SATlC;IAUI,UAAU,QAAQ,CAAC,SAAD,EAAY,UAAZ,EAAwB,UAAxB,EAAoC,IAApC,CAAyC,GAAzC,CAAR,GAAwD,GAAxD,GAA8D,KAV5E;;;AAaA,IAAI,gBAAgB,OAAO,CACzB,UAAU,GAAV,GAAgB,OAAhB,GAA0B,GAA1B,GAAgC,eAAhC,GAAkD,KAAlD,GAA0D,CAAC,OAAD,EAAU,OAAV,EAAmB,GAAnB,EAAwB,IAAxB,CAA6B,GAA7B,CAA1D,GAA8F,GADrE,EAEzB,cAAc,GAAd,GAAoB,eAApB,GAAsC,KAAtC,GAA8C,CAAC,OAAD,EAAU,UAAU,WAApB,EAAiC,GAAjC,EAAsC,IAAtC,CAA2C,GAA3C,CAA9C,GAAgG,GAFvE,EAGzB,UAAU,GAAV,GAAgB,WAAhB,GAA8B,GAA9B,GAAoC,eAHX,EAIzB,UAAU,GAAV,GAAgB,eAJS,EAKzB,UALyB,EAMzB,UANyB,EAOzB,QAPyB,EAQzB,OARyB,EASzB,IATyB,CASpB,GAToB,CAAP,EASP,GATO,CAApB;;;;;;;;;AAkBA,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC5B,WAAO,OAAO,KAAP,CAAa,aAAb,KAA+B,EAAtC;AACD;;AAED,OAAO,OAAP,GAAiB,YAAjB","file":"_unicodeWords-compiled.js","sourcesContent":["/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)',\n    rsOrdUpper = '\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n"]}