{"version":3,"sources":["_equalObjects.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,QAAR,CAAX;;;AAGA,IAAI,uBAAuB,CAA3B;;;AAGA,IAAI,cAAc,OAAO,SAAzB;;;AAGA,IAAI,iBAAiB,YAAY,cAAjC;;;;;;;;;;;;;;;AAeA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,KAA9B,EAAqC,OAArC,EAA8C,UAA9C,EAA0D,SAA1D,EAAqE,KAArE,EAA4E;AAC1E,MAAI,YAAY,UAAU,oBAA1B;MACI,WAAW,KAAK,MAAL,CADf;MAEI,YAAY,SAAS,MAFzB;MAGI,WAAW,KAAK,KAAL,CAHf;MAII,YAAY,SAAS,MAJzB;;AAMA,MAAI,aAAa,SAAb,IAA0B,CAAC,SAA/B,EAA0C;AACxC,WAAO,KAAP;AACD;AACD,MAAI,QAAQ,SAAZ;AACA,SAAO,OAAP,EAAgB;AACd,QAAI,MAAM,SAAS,KAAT,CAAV;AACA,QAAI,EAAE,YAAY,OAAO,KAAnB,GAA2B,eAAe,IAAf,CAAoB,KAApB,EAA2B,GAA3B,CAA7B,CAAJ,EAAmE;AACjE,aAAO,KAAP;AACD;AACF;;AAED,MAAI,UAAU,MAAM,GAAN,CAAU,MAAV,CAAd;AACA,MAAI,WAAW,MAAM,GAAN,CAAU,KAAV,CAAf,EAAiC;AAC/B,WAAO,WAAW,KAAlB;AACD;AACD,MAAI,SAAS,IAAb;AACA,QAAM,GAAN,CAAU,MAAV,EAAkB,KAAlB;AACA,QAAM,GAAN,CAAU,KAAV,EAAiB,MAAjB;;AAEA,MAAI,WAAW,SAAf;AACA,SAAO,EAAE,KAAF,GAAU,SAAjB,EAA4B;AAC1B,UAAM,SAAS,KAAT,CAAN;AACA,QAAI,WAAW,OAAO,GAAP,CAAf;QACI,WAAW,MAAM,GAAN,CADf;;AAGA,QAAI,UAAJ,EAAgB;AACd,UAAI,WAAW,YACX,WAAW,QAAX,EAAqB,QAArB,EAA+B,GAA/B,EAAoC,KAApC,EAA2C,MAA3C,EAAmD,KAAnD,CADW,GAEX,WAAW,QAAX,EAAqB,QAArB,EAA+B,GAA/B,EAAoC,MAApC,EAA4C,KAA5C,EAAmD,KAAnD,CAFJ;AAGD;;AAED,QAAI,EAAE,aAAa,SAAb,GACG,aAAa,QAAb,IAAyB,UAAU,QAAV,EAAoB,QAApB,EAA8B,OAA9B,EAAuC,UAAvC,EAAmD,KAAnD,CAD5B,GAEE,QAFJ,CAAJ,EAGO;AACL,eAAS,KAAT;AACA;AACD;AACD,iBAAa,WAAW,OAAO,aAA/B;AACD;AACD,MAAI,UAAU,CAAC,QAAf,EAAyB;AACvB,QAAI,UAAU,OAAO,WAArB;QACI,UAAU,MAAM,WADpB;;;AAIA,QAAI,WAAW,OAAX,IACC,iBAAiB,MAAjB,IAA2B,iBAAiB,KAD7C,IAEA,EAAE,OAAO,OAAP,IAAkB,UAAlB,IAAgC,mBAAmB,OAAnD,IACA,OAAO,OAAP,IAAkB,UADlB,IACgC,mBAAmB,OADrD,CAFJ,EAGmE;AACjE,eAAS,KAAT;AACD;AACF;AACD,QAAM,QAAN,EAAgB,MAAhB;AACA,QAAM,QAAN,EAAgB,KAAhB;AACA,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,YAAjB","file":"_equalObjects-compiled.js","sourcesContent":["var keys = require('./keys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n"]}