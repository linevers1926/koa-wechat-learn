{"version":3,"sources":["countBy.js"],"names":[],"mappings":"AAAA,IAAI,kBAAkB,QAAQ,oBAAR,CAAtB;IACI,mBAAmB,QAAQ,qBAAR,CADvB;;;AAIA,IAAI,cAAc,OAAO,SAAzB;;;AAGA,IAAI,iBAAiB,YAAY,cAAjC;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAI,UAAU,iBAAiB,UAAS,MAAT,EAAiB,KAAjB,EAAwB,GAAxB,EAA6B;AAC1D,MAAI,eAAe,IAAf,CAAoB,MAApB,EAA4B,GAA5B,CAAJ,EAAsC;AACpC,MAAE,OAAO,GAAP,CAAF;AACD,GAFD,MAEO;AACL,oBAAgB,MAAhB,EAAwB,GAAxB,EAA6B,CAA7B;AACD;AACF,CANa,CAAd;;AAQA,OAAO,OAAP,GAAiB,OAAjB","file":"countBy-compiled.js","sourcesContent":["var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the number of times the key was returned by `iteratee`. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.countBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': 1, '6': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.countBy(['one', 'two', 'three'], 'length');\n * // => { '3': 2, '5': 1 }\n */\nvar countBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    ++result[key];\n  } else {\n    baseAssignValue(result, key, 1);\n  }\n});\n\nmodule.exports = countBy;\n"]}