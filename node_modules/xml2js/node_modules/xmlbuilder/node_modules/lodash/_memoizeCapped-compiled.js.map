{"version":3,"sources":["_memoizeCapped.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,WAAR,CAAd;;;AAGA,IAAI,mBAAmB,GAAvB;;;;;;;;;;AAUA,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AAC3B,MAAI,SAAS,QAAQ,IAAR,EAAc,UAAS,GAAT,EAAc;AACvC,QAAI,MAAM,IAAN,KAAe,gBAAnB,EAAqC;AACnC,YAAM,KAAN;AACD;AACD,WAAO,GAAP;AACD,GALY,CAAb;;AAOA,MAAI,QAAQ,OAAO,KAAnB;AACA,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"_memoizeCapped-compiled.js","sourcesContent":["var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n"]}