{"version":3,"sources":["_createRecurry.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;IACI,UAAU,QAAQ,YAAR,CADd;IAEI,kBAAkB,QAAQ,oBAAR,CAFtB;;;AAKA,IAAI,iBAAiB,CAArB;IACI,qBAAqB,CADzB;IAEI,wBAAwB,CAF5B;IAGI,kBAAkB,CAHtB;IAII,oBAAoB,EAJxB;IAKI,0BAA0B,EAL9B;;;;;;;;;;;;;;;;;;;AAwBA,SAAS,aAAT,CAAuB,IAAvB,EAA6B,OAA7B,EAAsC,QAAtC,EAAgD,WAAhD,EAA6D,OAA7D,EAAsE,QAAtE,EAAgF,OAAhF,EAAyF,MAAzF,EAAiG,GAAjG,EAAsG,KAAtG,EAA6G;AAC3G,MAAI,UAAU,UAAU,eAAxB;MACI,aAAa,UAAU,OAAV,GAAoB,SADrC;MAEI,kBAAkB,UAAU,SAAV,GAAsB,OAF5C;MAGI,cAAc,UAAU,QAAV,GAAqB,SAHvC;MAII,mBAAmB,UAAU,SAAV,GAAsB,QAJ7C;;AAMA,aAAY,UAAU,iBAAV,GAA8B,uBAA1C;AACA,aAAW,EAAE,UAAU,uBAAV,GAAoC,iBAAtC,CAAX;;AAEA,MAAI,EAAE,UAAU,qBAAZ,CAAJ,EAAwC;AACtC,eAAW,EAAE,iBAAiB,kBAAnB,CAAX;AACD;AACD,MAAI,UAAU,CACZ,IADY,EACN,OADM,EACG,OADH,EACY,WADZ,EACyB,UADzB,EACqC,gBADrC,EAEZ,eAFY,EAEK,MAFL,EAEa,GAFb,EAEkB,KAFlB,CAAd;;AAKA,MAAI,SAAS,SAAS,KAAT,CAAe,SAAf,EAA0B,OAA1B,CAAb;AACA,MAAI,WAAW,IAAX,CAAJ,EAAsB;AACpB,YAAQ,MAAR,EAAgB,OAAhB;AACD;AACD,SAAO,WAAP,GAAqB,WAArB;AACA,SAAO,gBAAgB,MAAhB,EAAwB,IAAxB,EAA8B,OAA9B,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"_createRecurry-compiled.js","sourcesContent":["var isLaziable = require('./_isLaziable'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * Creates a function that wraps `func` to continue currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {Function} wrapFunc The function to create the `func` wrapper.\n * @param {*} placeholder The placeholder value.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n  var isCurry = bitmask & WRAP_CURRY_FLAG,\n      newHolders = isCurry ? holders : undefined,\n      newHoldersRight = isCurry ? undefined : holders,\n      newPartials = isCurry ? partials : undefined,\n      newPartialsRight = isCurry ? undefined : partials;\n\n  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n  }\n  var newData = [\n    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n    newHoldersRight, argPos, ary, arity\n  ];\n\n  var result = wrapFunc.apply(undefined, newData);\n  if (isLaziable(func)) {\n    setData(result, newData);\n  }\n  result.placeholder = placeholder;\n  return setWrapToString(result, func, bitmask);\n}\n\nmodule.exports = createRecurry;\n"]}