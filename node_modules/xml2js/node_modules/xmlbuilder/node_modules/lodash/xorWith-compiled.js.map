{"version":3,"sources":["xorWith.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;IACI,WAAW,QAAQ,aAAR,CADf;IAEI,UAAU,QAAQ,YAAR,CAFd;IAGI,oBAAoB,QAAQ,qBAAR,CAHxB;IAII,OAAO,QAAQ,QAAR,CAJX;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAI,UAAU,SAAS,UAAS,MAAT,EAAiB;AACtC,MAAI,aAAa,KAAK,MAAL,CAAjB;AACA,eAAa,OAAO,UAAP,IAAqB,UAArB,GAAkC,UAAlC,GAA+C,SAA5D;AACA,SAAO,QAAQ,YAAY,MAAZ,EAAoB,iBAApB,CAAR,EAAgD,SAAhD,EAA2D,UAA3D,CAAP;AACD,CAJa,CAAd;;AAMA,OAAO,OAAP,GAAiB,OAAjB","file":"xorWith-compiled.js","sourcesContent":["var arrayFilter = require('./_arrayFilter'),\n    baseRest = require('./_baseRest'),\n    baseXor = require('./_baseXor'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The order of result values is\n * determined by the order they occur in the arrays. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.xorWith(objects, others, _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar xorWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n});\n\nmodule.exports = xorWith;\n"]}