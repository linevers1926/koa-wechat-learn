{"version":3,"sources":["partialRight.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,aAAR,CAAf;IACI,aAAa,QAAQ,eAAR,CADjB;IAEI,YAAY,QAAQ,cAAR,CAFhB;IAGI,iBAAiB,QAAQ,mBAAR,CAHrB;;;AAMA,IAAI,0BAA0B,EAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,IAAI,eAAe,SAAS,UAAS,IAAT,EAAe,QAAf,EAAyB;AACnD,MAAI,UAAU,eAAe,QAAf,EAAyB,UAAU,YAAV,CAAzB,CAAd;AACA,SAAO,WAAW,IAAX,EAAiB,uBAAjB,EAA0C,SAA1C,EAAqD,QAArD,EAA+D,OAA/D,CAAP;AACD,CAHkB,CAAnB;;;AAMA,aAAa,WAAb,GAA2B,EAA3B;;AAEA,OAAO,OAAP,GAAiB,YAAjB","file":"partialRight-compiled.js","sourcesContent":["var baseRest = require('./_baseRest'),\n    createWrap = require('./_createWrap'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * This method is like `_.partial` except that partially applied arguments\n * are appended to the arguments it receives.\n *\n * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * **Note:** This method doesn't set the \"length\" property of partially\n * applied functions.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Function\n * @param {Function} func The function to partially apply arguments to.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new partially applied function.\n * @example\n *\n * function greet(greeting, name) {\n *   return greeting + ' ' + name;\n * }\n *\n * var greetFred = _.partialRight(greet, 'fred');\n * greetFred('hi');\n * // => 'hi fred'\n *\n * // Partially applied with placeholders.\n * var sayHelloTo = _.partialRight(greet, 'hello', _);\n * sayHelloTo('fred');\n * // => 'hello fred'\n */\nvar partialRight = baseRest(function(func, partials) {\n  var holders = replaceHolders(partials, getHolder(partialRight));\n  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n});\n\n// Assign default placeholders.\npartialRight.placeholder = {};\n\nmodule.exports = partialRight;\n"]}