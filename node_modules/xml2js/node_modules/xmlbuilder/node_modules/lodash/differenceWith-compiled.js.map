{"version":3,"sources":["differenceWith.js"],"names":[],"mappings":"AAAA,IAAI,iBAAiB,QAAQ,mBAAR,CAArB;IACI,cAAc,QAAQ,gBAAR,CADlB;IAEI,WAAW,QAAQ,aAAR,CAFf;IAGI,oBAAoB,QAAQ,qBAAR,CAHxB;IAII,OAAO,QAAQ,QAAR,CAJX;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAI,iBAAiB,SAAS,UAAS,KAAT,EAAgB,MAAhB,EAAwB;AACpD,MAAI,aAAa,KAAK,MAAL,CAAjB;AACA,MAAI,kBAAkB,UAAlB,CAAJ,EAAmC;AACjC,iBAAa,SAAb;AACD;AACD,SAAO,kBAAkB,KAAlB,IACH,eAAe,KAAf,EAAsB,YAAY,MAAZ,EAAoB,CAApB,EAAuB,iBAAvB,EAA0C,IAA1C,CAAtB,EAAuE,SAAvE,EAAkF,UAAlF,CADG,GAEH,EAFJ;AAGD,CARoB,CAArB;;AAUA,OAAO,OAAP,GAAiB,cAAjB","file":"differenceWith-compiled.js","sourcesContent":["var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. The order and\n * references of result values are determined by the first array. The comparator\n * is invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = baseRest(function(array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n    : [];\n});\n\nmodule.exports = differenceWith;\n"]}