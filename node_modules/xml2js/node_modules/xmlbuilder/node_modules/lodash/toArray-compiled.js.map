{"version":3,"sources":["toArray.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,WAAR,CAAb;IACI,YAAY,QAAQ,cAAR,CADhB;IAEI,SAAS,QAAQ,WAAR,CAFb;IAGI,cAAc,QAAQ,eAAR,CAHlB;IAII,WAAW,QAAQ,YAAR,CAJf;IAKI,kBAAkB,QAAQ,oBAAR,CALtB;IAMI,aAAa,QAAQ,eAAR,CANjB;IAOI,aAAa,QAAQ,eAAR,CAPjB;IAQI,gBAAgB,QAAQ,kBAAR,CARpB;IASI,SAAS,QAAQ,UAAR,CATb;;;AAYA,IAAI,SAAS,cAAb;IACI,SAAS,cADb;;;AAIA,IAAI,cAAc,SAAS,OAAO,QAAhB,GAA2B,SAA7C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AACtB,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,EAAP;AACD;AACD,MAAI,YAAY,KAAZ,CAAJ,EAAwB;AACtB,WAAO,SAAS,KAAT,IAAkB,cAAc,KAAd,CAAlB,GAAyC,UAAU,KAAV,CAAhD;AACD;AACD,MAAI,eAAe,MAAM,WAAN,CAAnB,EAAuC;AACrC,WAAO,gBAAgB,MAAM,WAAN,GAAhB,CAAP;AACD;AACD,MAAI,MAAM,OAAO,KAAP,CAAV;MACI,OAAO,OAAO,MAAP,GAAgB,UAAhB,GAA8B,OAAO,MAAP,GAAgB,UAAhB,GAA6B,MADtE;;AAGA,SAAO,KAAK,KAAL,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"toArray-compiled.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    copyArray = require('./_copyArray'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    iteratorToArray = require('./_iteratorToArray'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray'),\n    stringToArray = require('./_stringToArray'),\n    values = require('./values');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Built-in value references. */\nvar symIterator = Symbol ? Symbol.iterator : undefined;\n\n/**\n * Converts `value` to an array.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * _.toArray({ 'a': 1, 'b': 2 });\n * // => [1, 2]\n *\n * _.toArray('abc');\n * // => ['a', 'b', 'c']\n *\n * _.toArray(1);\n * // => []\n *\n * _.toArray(null);\n * // => []\n */\nfunction toArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (isArrayLike(value)) {\n    return isString(value) ? stringToArray(value) : copyArray(value);\n  }\n  if (symIterator && value[symIterator]) {\n    return iteratorToArray(value[symIterator]());\n  }\n  var tag = getTag(value),\n      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n  return func(value);\n}\n\nmodule.exports = toArray;\n"]}