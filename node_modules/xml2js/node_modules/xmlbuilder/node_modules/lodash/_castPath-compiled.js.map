{"version":3,"sources":["_castPath.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,WAAR,CAAd;IACI,QAAQ,QAAQ,UAAR,CADZ;IAEI,eAAe,QAAQ,iBAAR,CAFnB;IAGI,WAAW,QAAQ,YAAR,CAHf;;;;;;;;;;AAaA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,MAAzB,EAAiC;AAC/B,MAAI,QAAQ,KAAR,CAAJ,EAAoB;AAClB,WAAO,KAAP;AACD;AACD,SAAO,MAAM,KAAN,EAAa,MAAb,IAAuB,CAAC,KAAD,CAAvB,GAAiC,aAAa,SAAS,KAAT,CAAb,CAAxC;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"_castPath-compiled.js","sourcesContent":["var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n"]}