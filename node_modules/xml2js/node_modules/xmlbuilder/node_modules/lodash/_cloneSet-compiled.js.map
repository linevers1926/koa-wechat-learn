{"version":3,"sources":["_cloneSet.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;IACI,cAAc,QAAQ,gBAAR,CADlB;IAEI,aAAa,QAAQ,eAAR,CAFjB;;;AAKA,IAAI,kBAAkB,CAAtB;;;;;;;;;;;AAWA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,MAAvB,EAA+B,SAA/B,EAA0C;AACxC,MAAI,QAAQ,SAAS,UAAU,WAAW,GAAX,CAAV,EAA2B,eAA3B,CAAT,GAAuD,WAAW,GAAX,CAAnE;AACA,SAAO,YAAY,KAAZ,EAAmB,WAAnB,EAAgC,IAAI,IAAI,WAAR,EAAhC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"_cloneSet-compiled.js","sourcesContent":["var addSetEntry = require('./_addSetEntry'),\n    arrayReduce = require('./_arrayReduce'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\nmodule.exports = cloneSet;\n"]}