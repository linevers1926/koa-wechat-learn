{"version":3,"sources":["_assignValue.js"],"names":[],"mappings":"AAAA,IAAI,kBAAkB,QAAQ,oBAAR,CAAtB;IACI,KAAK,QAAQ,MAAR,CADT;;;AAIA,IAAI,cAAc,OAAO,SAAzB;;;AAGA,IAAI,iBAAiB,YAAY,cAAjC;;;;;;;;;;;;AAYA,SAAS,WAAT,CAAqB,MAArB,EAA6B,GAA7B,EAAkC,KAAlC,EAAyC;AACvC,MAAI,WAAW,OAAO,GAAP,CAAf;AACA,MAAI,EAAE,eAAe,IAAf,CAAoB,MAApB,EAA4B,GAA5B,KAAoC,GAAG,QAAH,EAAa,KAAb,CAAtC,KACC,UAAU,SAAV,IAAuB,EAAE,OAAO,MAAT,CAD5B,EAC+C;AAC7C,oBAAgB,MAAhB,EAAwB,GAAxB,EAA6B,KAA7B;AACD;AACF;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_assignValue-compiled.js","sourcesContent":["var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n"]}