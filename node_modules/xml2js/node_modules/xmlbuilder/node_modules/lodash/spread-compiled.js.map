{"version":3,"sources":["spread.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;IACI,YAAY,QAAQ,cAAR,CADhB;IAEI,WAAW,QAAQ,aAAR,CAFf;IAGI,YAAY,QAAQ,cAAR,CAHhB;IAII,YAAY,QAAQ,aAAR,CAJhB;;;AAOA,IAAI,kBAAkB,qBAAtB;;;AAGA,IAAI,YAAY,KAAK,GAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAAS,MAAT,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B;AAC3B,MAAI,OAAO,IAAP,IAAe,UAAnB,EAA+B;AAC7B,UAAM,IAAI,SAAJ,CAAc,eAAd,CAAN;AACD;AACD,UAAQ,UAAU,SAAV,GAAsB,CAAtB,GAA0B,UAAU,UAAU,KAAV,CAAV,EAA4B,CAA5B,CAAlC;AACA,SAAO,SAAS,UAAS,IAAT,EAAe;AAC7B,QAAI,QAAQ,KAAK,KAAL,CAAZ;QACI,YAAY,UAAU,IAAV,EAAgB,CAAhB,EAAmB,KAAnB,CADhB;;AAGA,QAAI,KAAJ,EAAW;AACT,gBAAU,SAAV,EAAqB,KAArB;AACD;AACD,WAAO,MAAM,IAAN,EAAY,IAAZ,EAAkB,SAAlB,CAAP;AACD,GARM,CAAP;AASD;;AAED,OAAO,OAAP,GAAiB,MAAjB","file":"spread-compiled.js","sourcesContent":["var apply = require('./_apply'),\n    arrayPush = require('./_arrayPush'),\n    baseRest = require('./_baseRest'),\n    castSlice = require('./_castSlice'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * create function and an array of arguments much like\n * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n *\n * **Note:** This method is based on the\n * [spread operator](https://mdn.io/spread_operator).\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Function\n * @param {Function} func The function to spread arguments over.\n * @param {number} [start=0] The start position of the spread.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.spread(function(who, what) {\n *   return who + ' says ' + what;\n * });\n *\n * say(['fred', 'hello']);\n * // => 'fred says hello'\n *\n * var numbers = Promise.all([\n *   Promise.resolve(40),\n *   Promise.resolve(36)\n * ]);\n *\n * numbers.then(_.spread(function(x, y) {\n *   return x + y;\n * }));\n * // => a Promise of 76\n */\nfunction spread(func, start) {\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  start = start === undefined ? 0 : nativeMax(toInteger(start), 0);\n  return baseRest(function(args) {\n    var array = args[start],\n        otherArgs = castSlice(args, 0, start);\n\n    if (array) {\n      arrayPush(otherArgs, array);\n    }\n    return apply(func, this, otherArgs);\n  });\n}\n\nmodule.exports = spread;\n"]}