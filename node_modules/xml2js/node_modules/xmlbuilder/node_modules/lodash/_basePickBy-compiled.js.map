{"version":3,"sources":["_basePickBy.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,YAAR,CAAd;IACI,UAAU,QAAQ,YAAR,CADd;IAEI,WAAW,QAAQ,aAAR,CAFf;;;;;;;;;;;AAaA,SAAS,UAAT,CAAoB,MAApB,EAA4B,KAA5B,EAAmC,SAAnC,EAA8C;AAC5C,QAAI,QAAQ,CAAC,CAAb;QACI,SAAS,MAAM,MADnB;QAEI,SAAS,EAFb;;AAIA,WAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,YAAI,OAAO,MAAM,KAAN,CAAX;YACI,QAAQ,QAAQ,MAAR,EAAgB,IAAhB,CADZ;;AAGA,YAAI,UAAU,KAAV,EAAiB,IAAjB,CAAJ,EAA4B;AAC1B,oBAAQ,MAAR,EAAgB,SAAS,IAAT,EAAe,MAAf,CAAhB,EAAwC,KAAxC;AACD;AACF;AACD,WAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"_basePickBy-compiled.js","sourcesContent":["var baseGet = require('./_baseGet'),\n    baseSet = require('./_baseSet'),\n    castPath = require('./_castPath');\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n"]}