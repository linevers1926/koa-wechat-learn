{"version":3,"sources":["unionBy.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;IACI,eAAe,QAAQ,iBAAR,CADnB;IAEI,WAAW,QAAQ,aAAR,CAFf;IAGI,WAAW,QAAQ,aAAR,CAHf;IAII,oBAAoB,QAAQ,qBAAR,CAJxB;IAKI,OAAO,QAAQ,QAAR,CALX;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAI,UAAU,SAAS,UAAS,MAAT,EAAiB;AACtC,MAAI,WAAW,KAAK,MAAL,CAAf;AACA,MAAI,kBAAkB,QAAlB,CAAJ,EAAiC;AAC/B,eAAW,SAAX;AACD;AACD,SAAO,SAAS,YAAY,MAAZ,EAAoB,CAApB,EAAuB,iBAAvB,EAA0C,IAA1C,CAAT,EAA0D,aAAa,QAAb,EAAuB,CAAvB,CAA1D,CAAP;AACD,CANa,CAAd;;AAQA,OAAO,OAAP,GAAiB,OAAjB","file":"unionBy-compiled.js","sourcesContent":["var baseFlatten = require('./_baseFlatten'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.union` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which uniqueness is computed. Result values are chosen from the first\n * array in which the value occurs. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nvar unionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));\n});\n\nmodule.exports = unionBy;\n"]}