{"version":3,"sources":["_mergeData.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;IACI,mBAAmB,QAAQ,qBAAR,CADvB;IAEI,iBAAiB,QAAQ,mBAAR,CAFrB;;;AAKA,IAAI,cAAc,wBAAlB;;;AAGA,IAAI,iBAAiB,CAArB;IACI,qBAAqB,CADzB;IAEI,wBAAwB,CAF5B;IAGI,kBAAkB,CAHtB;IAII,gBAAgB,GAJpB;IAKI,kBAAkB,GALtB;;;AAQA,IAAI,YAAY,KAAK,GAArB;;;;;;;;;;;;;;;;;;AAkBA,SAAS,SAAT,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC;AAC/B,MAAI,UAAU,KAAK,CAAL,CAAd;MACI,aAAa,OAAO,CAAP,CADjB;MAEI,aAAa,UAAU,UAF3B;MAGI,WAAW,cAAc,iBAAiB,kBAAjB,GAAsC,aAApD,CAHf;;AAKA,MAAI,UACA,cAAc,aAAf,IAAkC,WAAW,eAA9C,IACE,cAAc,aAAf,IAAkC,WAAW,eAA7C,IAAkE,KAAK,CAAL,EAAQ,MAAR,IAAkB,OAAO,CAAP,CADrF,IAEE,eAAe,gBAAgB,eAA/B,CAAD,IAAsD,OAAO,CAAP,EAAU,MAAV,IAAoB,OAAO,CAAP,CAA1E,IAAyF,WAAW,eAHvG;;;AAMA,MAAI,EAAE,YAAY,OAAd,CAAJ,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,MAAI,aAAa,cAAjB,EAAiC;AAC/B,SAAK,CAAL,IAAU,OAAO,CAAP,CAAV;;AAEA,kBAAc,UAAU,cAAV,GAA2B,CAA3B,GAA+B,qBAA7C;AACD;;AAED,MAAI,QAAQ,OAAO,CAAP,CAAZ;AACA,MAAI,KAAJ,EAAW;AACT,QAAI,WAAW,KAAK,CAAL,CAAf;AACA,SAAK,CAAL,IAAU,WAAW,YAAY,QAAZ,EAAsB,KAAtB,EAA6B,OAAO,CAAP,CAA7B,CAAX,GAAqD,KAA/D;AACA,SAAK,CAAL,IAAU,WAAW,eAAe,KAAK,CAAL,CAAf,EAAwB,WAAxB,CAAX,GAAkD,OAAO,CAAP,CAA5D;AACD;;AAED,UAAQ,OAAO,CAAP,CAAR;AACA,MAAI,KAAJ,EAAW;AACT,eAAW,KAAK,CAAL,CAAX;AACA,SAAK,CAAL,IAAU,WAAW,iBAAiB,QAAjB,EAA2B,KAA3B,EAAkC,OAAO,CAAP,CAAlC,CAAX,GAA0D,KAApE;AACA,SAAK,CAAL,IAAU,WAAW,eAAe,KAAK,CAAL,CAAf,EAAwB,WAAxB,CAAX,GAAkD,OAAO,CAAP,CAA5D;AACD;;AAED,UAAQ,OAAO,CAAP,CAAR;AACA,MAAI,KAAJ,EAAW;AACT,SAAK,CAAL,IAAU,KAAV;AACD;;AAED,MAAI,aAAa,aAAjB,EAAgC;AAC9B,SAAK,CAAL,IAAU,KAAK,CAAL,KAAW,IAAX,GAAkB,OAAO,CAAP,CAAlB,GAA8B,UAAU,KAAK,CAAL,CAAV,EAAmB,OAAO,CAAP,CAAnB,CAAxC;AACD;;AAED,MAAI,KAAK,CAAL,KAAW,IAAf,EAAqB;AACnB,SAAK,CAAL,IAAU,OAAO,CAAP,CAAV;AACD;;AAED,OAAK,CAAL,IAAU,OAAO,CAAP,CAAV;AACA,OAAK,CAAL,IAAU,UAAV;;AAEA,SAAO,IAAP;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"_mergeData-compiled.js","sourcesContent":["var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n"]}