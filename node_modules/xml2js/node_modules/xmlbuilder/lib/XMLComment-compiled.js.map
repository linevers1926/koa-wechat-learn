{"version":3,"sources":["XMLComment.js"],"names":[],"mappings":";AACA,CAAC,YAAW;AACV,MAAI,UAAJ;MAAgB,OAAhB;MAAyB,MAAzB;MACE,SAAS,UAAS,KAAT,EAAgB,MAAhB,EAAwB;AAAE,SAAK,IAAI,GAAT,IAAgB,MAAhB,EAAwB;AAAE,UAAI,QAAQ,IAAR,CAAa,MAAb,EAAqB,GAArB,CAAJ,EAA+B,MAAM,GAAN,IAAa,OAAO,GAAP,CAAb;AAA2B,KAAC,SAAS,IAAT,GAAgB;AAAE,WAAK,WAAL,GAAmB,KAAnB;AAA2B,KAAC,KAAK,SAAL,GAAiB,OAAO,SAAxB,CAAmC,MAAM,SAAN,GAAkB,IAAI,IAAJ,EAAlB,CAA8B,MAAM,SAAN,GAAkB,OAAO,SAAzB,CAAoC,OAAO,KAAP;AAAe,GAD5R;MAEE,UAAU,GAAG,cAFf;;AAIA,WAAS,QAAQ,eAAR,CAAT;;AAEA,YAAU,QAAQ,WAAR,CAAV;;AAEA,SAAO,OAAP,GAAiB,aAAc,UAAS,UAAT,EAAqB;AAClD,WAAO,UAAP,EAAmB,UAAnB;;AAEA,aAAS,UAAT,CAAoB,MAApB,EAA4B,IAA5B,EAAkC;AAChC,iBAAW,SAAX,CAAqB,WAArB,CAAiC,IAAjC,CAAsC,IAAtC,EAA4C,MAA5C;AACA,UAAI,QAAQ,IAAZ,EAAkB;AAChB,cAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;AACD,WAAK,IAAL,GAAY,KAAK,SAAL,CAAe,OAAf,CAAuB,IAAvB,CAAZ;AACD;;AAED,eAAW,SAAX,CAAqB,KAArB,GAA6B,YAAW;AACtC,aAAO,OAAO,WAAW,SAAlB,EAA6B,IAA7B,CAAP;AACD,KAFD;;AAIA,eAAW,SAAX,CAAqB,QAArB,GAAgC,UAAS,OAAT,EAAkB,KAAlB,EAAyB;AACvD,UAAI,MAAJ,EAAY,OAAZ,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,CAArC,EAAwC,GAAxC,EAA6C,IAA7C,EAAmD,IAAnD,EAAyD,KAAzD;AACA,eAAS,CAAC,WAAW,IAAX,GAAkB,QAAQ,MAA1B,GAAmC,KAAK,CAAzC,KAA+C,KAAxD;AACA,eAAS,CAAC,MAAM,WAAW,IAAX,GAAkB,QAAQ,MAA1B,GAAmC,KAAK,CAA/C,KAAqD,IAArD,GAA4D,GAA5D,GAAkE,IAA3E;AACA,eAAS,CAAC,OAAO,WAAW,IAAX,GAAkB,QAAQ,MAA1B,GAAmC,KAAK,CAAhD,KAAsD,IAAtD,GAA6D,IAA7D,GAAoE,CAA7E;AACA,gBAAU,CAAC,OAAO,WAAW,IAAX,GAAkB,QAAQ,OAA1B,GAAoC,KAAK,CAAjD,KAAuD,IAAvD,GAA8D,IAA9D,GAAqE,IAA/E;AACA,gBAAU,QAAQ,CAAlB;AACA,cAAQ,IAAI,KAAJ,CAAU,QAAQ,MAAR,GAAiB,CAA3B,EAA8B,IAA9B,CAAmC,MAAnC,CAAR;AACA,UAAI,EAAJ;AACA,UAAI,MAAJ,EAAY;AACV,aAAK,KAAL;AACD;AACD,WAAK,UAAU,KAAK,IAAf,GAAsB,MAA3B;AACA,UAAI,MAAJ,EAAY;AACV,aAAK,OAAL;AACD;AACD,aAAO,CAAP;AACD,KAjBD;;AAmBA,WAAO,UAAP;AAED,GApC6B,CAoC3B,OApC2B,CAA9B;AAsCD,CA/CD,EA+CG,IA/CH,CA+CQ,IA/CR","file":"XMLComment-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.9.1\n(function() {\n  var XMLComment, XMLNode, create,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  create = require('lodash/create');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLComment = (function(superClass) {\n    extend(XMLComment, superClass);\n\n    function XMLComment(parent, text) {\n      XMLComment.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text\");\n      }\n      this.text = this.stringify.comment(text);\n    }\n\n    XMLComment.prototype.clone = function() {\n      return create(XMLComment.prototype, this);\n    };\n\n    XMLComment.prototype.toString = function(options, level) {\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;\n      pretty = (options != null ? options.pretty : void 0) || false;\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';\n      level || (level = 0);\n      space = new Array(level + offset + 1).join(indent);\n      r = '';\n      if (pretty) {\n        r += space;\n      }\n      r += '<!-- ' + this.text + ' -->';\n      if (pretty) {\n        r += newline;\n      }\n      return r;\n    };\n\n    return XMLComment;\n\n  })(XMLNode);\n\n}).call(this);\n"]}